{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/VectorSource.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { cloneReactChildrenWithProps, viewPropTypes, isFunction, isAndroid } from \"../utils\";\nimport { getFilter } from \"../utils/filterUtils\";\nimport { copyPropertiesAsDeprecated } from \"../utils/deprecation\";\nimport AbstractSource from \"./AbstractSource\";\nimport NativeBridgeComponent from \"./NativeBridgeComponent\";\nvar MapboxGL = NativeModules.MGLModule;\nexport var NATIVE_MODULE_NAME = 'RCTMGLVectorSource';\n\nvar VectorSource = function (_NativeBridgeComponen) {\n  _inherits(VectorSource, _NativeBridgeComponen);\n\n  var _super = _createSuper(VectorSource);\n\n  function VectorSource(props) {\n    _classCallCheck(this, VectorSource);\n\n    return _super.call(this, props, NATIVE_MODULE_NAME);\n  }\n\n  _createClass(VectorSource, [{\n    key: \"_setNativeRef\",\n    value: function _setNativeRef(nativeRef) {\n      this._nativeRef = nativeRef;\n\n      _get(_getPrototypeOf(VectorSource.prototype), \"_runPendingNativeCommands\", this).call(this, nativeRef);\n    }\n  }, {\n    key: \"features\",\n    value: function features() {\n      var layerIDs,\n          filter,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.async(function features$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              layerIDs = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];\n              filter = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('features', this._nativeRef, [layerIDs, getFilter(filter)]));\n\n            case 4:\n              res = _context.sent;\n\n              if (!isAndroid()) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", JSON.parse(res.data));\n\n            case 7:\n              return _context.abrupt(\"return\", res.data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onPress\",\n    value: function onPress(event) {\n      var _event$nativeEvent$pa = event.nativeEvent.payload,\n          features = _event$nativeEvent$pa.features,\n          coordinates = _event$nativeEvent$pa.coordinates,\n          point = _event$nativeEvent$pa.point;\n      var newEvent = {\n        features: features,\n        coordinates: coordinates,\n        point: point\n      };\n      newEvent = copyPropertiesAsDeprecated(event, newEvent, function (key) {\n        console.warn(\"event.\" + key + \" is deprecated on VectorSource#onPress, please use event.features\");\n      }, {\n        nativeEvent: function nativeEvent(origNativeEvent) {\n          return _objectSpread(_objectSpread({}, origNativeEvent), {}, {\n            payload: features[0]\n          });\n        }\n      });\n      this.props.onPress(newEvent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var props = {\n        id: this.props.id,\n        url: this.props.url,\n        tileUrlTemplates: this.props.tileUrlTemplates,\n        minZoomLevel: this.props.minZoomLevel,\n        maxZoomLevel: this.props.maxZoomLevel,\n        tms: this.props.tms,\n        attribution: this.props.attribution,\n        hitbox: this.props.hitbox,\n        hasPressListener: isFunction(this.props.onPress),\n        onMapboxVectorSourcePress: this.onPress.bind(this),\n        onPress: undefined,\n        ref: function ref(nativeRef) {\n          return _this._setNativeRef(nativeRef);\n        },\n        onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined\n      };\n      return React.createElement(RCTMGLVectorSource, _extends({\n        ref: \"nativeSource\"\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 7\n        }\n      }), cloneReactChildrenWithProps(this.props.children, {\n        sourceID: this.props.id\n      }));\n    }\n  }]);\n\n  return VectorSource;\n}(NativeBridgeComponent(AbstractSource));\n\nVectorSource.propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  tileUrlTemplates: PropTypes.arrayOf(PropTypes.string),\n  minZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  tms: PropTypes.bool,\n  attribution: PropTypes.string,\n  onPress: PropTypes.func,\n  hitbox: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired\n  })\n});\nVectorSource.defaultProps = {\n  id: MapboxGL.StyleSource.DefaultSourceID\n};\nvar RCTMGLVectorSource = requireNativeComponent(NATIVE_MODULE_NAME, VectorSource, {\n  nativeOnly: {\n    hasPressListener: true,\n    onMapboxVectorSourcePress: true\n  }\n});\nexport default VectorSource;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/VectorSource.js"],"names":["React","PropTypes","requireNativeComponent","cloneReactChildrenWithProps","viewPropTypes","isFunction","isAndroid","getFilter","copyPropertiesAsDeprecated","AbstractSource","NativeBridgeComponent","MapboxGL","NativeModules","MGLModule","NATIVE_MODULE_NAME","VectorSource","props","nativeRef","_nativeRef","layerIDs","filter","_runNativeCommand","res","JSON","parse","data","event","nativeEvent","payload","features","coordinates","point","newEvent","key","console","warn","origNativeEvent","onPress","id","url","tileUrlTemplates","minZoomLevel","maxZoomLevel","tms","attribution","hitbox","hasPressListener","onMapboxVectorSourcePress","bind","undefined","ref","_setNativeRef","onAndroidCallback","_onAndroidCallback","children","sourceID","propTypes","string","isRequired","arrayOf","number","bool","func","shape","width","height","defaultProps","StyleSource","DefaultSourceID","RCTMGLVectorSource","nativeOnly"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {NativeModules, requireNativeComponent} from 'react-native';\n\nimport {\n  cloneReactChildrenWithProps,\n  viewPropTypes,\n  isFunction,\n  isAndroid,\n} from '../utils';\nimport {getFilter} from '../utils/filterUtils';\nimport {copyPropertiesAsDeprecated} from '../utils/deprecation';\n\nimport AbstractSource from './AbstractSource';\nimport NativeBridgeComponent from './NativeBridgeComponent';\n\nconst MapboxGL = NativeModules.MGLModule;\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLVectorSource';\n\n/**\n * VectorSource is a map content source that supplies tiled vector data in Mapbox Vector Tile format to be shown on the map.\n * The location of and metadata about the tiles are defined either by an option dictionary or by an external file that conforms to the TileJSON specification.\n */\nclass VectorSource extends NativeBridgeComponent(AbstractSource) {\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * A string that uniquely identifies the source.\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * A URL to a TileJSON configuration file describing the source’s contents and other metadata.\n     */\n    url: PropTypes.string,\n\n    /**\n     * An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.\n     * Example: https://example.com/vector-tiles/{z}/{x}/{y}.pbf\n     */\n    tileUrlTemplates: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.\n     * The value should be between 0 and 22, inclusive, and less than\n     * maxZoomLevel, if specified. The default value for this option is 0.\n     */\n    minZoomLevel: PropTypes.number,\n\n    /**\n     * An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.\n     * The value should be between 0 and 22, inclusive, and less than\n     * minZoomLevel, if specified. The default value for this option is 22.\n     */\n    maxZoomLevel: PropTypes.number,\n\n    /**\n     * Influences the y direction of the tile coordinates. (tms inverts y axis)\n     */\n    tms: PropTypes.bool,\n\n    /**\n     * An HTML or literal text string defining the buttons to be displayed in an action sheet when the\n     * source is part of a map view’s style and the map view’s attribution button is pressed.\n     */\n    attribution: PropTypes.string,\n\n    /**\n     * Source press listener, gets called when a user presses one of the children layers only\n     * if that layer has a higher z-index than another source layers\n     *\n     * @param {Object} event\n     * @param {Object[]} event.features - the geojson features that have hit by the press (might be multiple)\n     * @param {Object} event.coordinates - the coordinates of the click\n     * @param {Object} event.point - the point of the click\n     */\n    onPress: PropTypes.func,\n\n    /**\n     * Overrides the default touch hitbox(44x44 pixels) for the source layers\n     */\n    hitbox: PropTypes.shape({\n      /**\n       * `width` of hitbox\n       */\n      width: PropTypes.number.isRequired,\n      /**\n       * `height` of hitbox\n       */\n      height: PropTypes.number.isRequired,\n    }),\n  };\n\n  static defaultProps = {\n    id: MapboxGL.StyleSource.DefaultSourceID,\n  };\n\n  constructor(props) {\n    super(props, NATIVE_MODULE_NAME);\n  }\n\n  _setNativeRef(nativeRef) {\n    this._nativeRef = nativeRef;\n    super._runPendingNativeCommands(nativeRef);\n  }\n\n  /**\n   * Returns all features that match the query parameters regardless of whether or not the feature is\n   * currently rendered on the map. The domain of the query includes all currently-loaded vector tiles\n   * and GeoJSON source tiles. This function does not check tiles outside of the visible viewport.\n   *\n   * @example\n   * vectorSource.features(['id1', 'id2'])\n   *\n   * @param  {Array=} layerIDs - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.\n   * @param  {Array=} filter - an optional filter statement to filter the returned Features.\n   * @return {FeatureCollection}\n   */\n  async features(layerIDs = [], filter = []) {\n    const res = await this._runNativeCommand('features', this._nativeRef, [\n      layerIDs,\n      getFilter(filter),\n    ]);\n\n    if (isAndroid()) {\n      return JSON.parse(res.data);\n    }\n\n    return res.data;\n  }\n\n  onPress(event) {\n    const {\n      nativeEvent: {\n        payload: {features, coordinates, point},\n      },\n    } = event;\n    let newEvent = {\n      features,\n      coordinates,\n      point,\n    };\n    newEvent = copyPropertiesAsDeprecated(\n      event,\n      newEvent,\n      (key) => {\n        console.warn(\n          `event.${key} is deprecated on VectorSource#onPress, please use event.features`,\n        );\n      },\n      {\n        nativeEvent: (origNativeEvent) => ({\n          ...origNativeEvent,\n          payload: features[0],\n        }),\n      },\n    );\n    this.props.onPress(newEvent);\n  }\n\n  render() {\n    const props = {\n      id: this.props.id,\n      url: this.props.url,\n      tileUrlTemplates: this.props.tileUrlTemplates,\n      minZoomLevel: this.props.minZoomLevel,\n      maxZoomLevel: this.props.maxZoomLevel,\n      tms: this.props.tms,\n      attribution: this.props.attribution,\n      hitbox: this.props.hitbox,\n      hasPressListener: isFunction(this.props.onPress),\n      onMapboxVectorSourcePress: this.onPress.bind(this),\n      onPress: undefined,\n      ref: (nativeRef) => this._setNativeRef(nativeRef),\n      onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined,\n    };\n    return (\n      <RCTMGLVectorSource ref=\"nativeSource\" {...props}>\n        {cloneReactChildrenWithProps(this.props.children, {\n          sourceID: this.props.id,\n        })}\n      </RCTMGLVectorSource>\n    );\n  }\n}\n\nconst RCTMGLVectorSource = requireNativeComponent(\n  NATIVE_MODULE_NAME,\n  VectorSource,\n  {\n    nativeOnly: {\n      hasPressListener: true,\n      onMapboxVectorSourcePress: true,\n    },\n  },\n);\n\nexport default VectorSource;\n"]},"metadata":{},"sourceType":"module"}