{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from 'react';\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nfunction getAndroidManagerInstance(module) {\n  var haveViewManagerConfig = NativeModules.UIManager && NativeModules.UIManager.getViewManagerConfig;\n  return haveViewManagerConfig ? NativeModules.UIManager.getViewManagerConfig(module) : NativeModules.UIManager[module];\n}\n\nfunction getIosManagerInstance(module) {\n  return NativeModules[getIOSModuleName(module)];\n}\n\nexport var viewPropTypes = ViewPropTypes || View.props;\nexport function isAndroid() {\n  return Platform.OS === 'android';\n}\nexport function existenceChange(cur, next) {\n  if (!cur && !next) {\n    return false;\n  }\n\n  return !cur && next || cur && !next;\n}\nexport function isFunction(fn) {\n  return typeof fn === 'function';\n}\nexport function isNumber(num) {\n  return typeof num === 'number' && !Number.isNaN(num);\n}\nexport function isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\nexport function isString(str) {\n  return typeof str === 'string';\n}\nexport function isBoolean(bool) {\n  return typeof bool === 'boolean';\n}\nexport function isPrimitive(value) {\n  return isString(value) || isNumber(value) || isBoolean(value);\n}\nexport function runNativeCommand(module, name, nativeRef) {\n  var args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var handle = findNodeHandle(nativeRef);\n\n  if (!handle) {\n    throw new Error(\"Could not find handle for native ref \" + module + \".\" + name);\n  }\n\n  var managerInstance = isAndroid() ? getAndroidManagerInstance(module) : getIosManagerInstance(module);\n\n  if (!managerInstance) {\n    throw new Error(\"Could not find \" + module);\n  }\n\n  if (isAndroid()) {\n    return NativeModules.UIManager.dispatchViewManagerCommand(handle, managerInstance.Commands[name], args);\n  }\n\n  return managerInstance[name].apply(managerInstance, [handle].concat(_toConsumableArray(args)));\n}\nexport function cloneReactChildrenWithProps(children) {\n  var propsToAdd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!children) {\n    return null;\n  }\n\n  var foundChildren = null;\n\n  if (!Array.isArray(children)) {\n    foundChildren = [children];\n  } else {\n    foundChildren = children;\n  }\n\n  var filteredChildren = foundChildren.filter(function (child) {\n    return !!child;\n  });\n  return React.Children.map(filteredChildren, function (child) {\n    return React.cloneElement(child, propsToAdd);\n  });\n}\nexport function resolveImagePath(imageRef) {\n  var res = resolveAssetSource(imageRef);\n  return res.uri;\n}\nexport function getIOSModuleName(moduleName) {\n  if (moduleName.startsWith('RCT')) {\n    return moduleName.substring(3);\n  }\n\n  return moduleName;\n}\nexport function toJSONString() {\n  var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return JSON.stringify(json);\n}","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/utils/index.js"],"names":["React","ViewPropTypes","resolveAssetSource","getAndroidManagerInstance","module","haveViewManagerConfig","NativeModules","UIManager","getViewManagerConfig","getIosManagerInstance","getIOSModuleName","viewPropTypes","View","props","isAndroid","Platform","OS","existenceChange","cur","next","isFunction","fn","isNumber","num","Number","isNaN","isUndefined","obj","isString","str","isBoolean","bool","isPrimitive","value","runNativeCommand","name","nativeRef","args","handle","findNodeHandle","Error","managerInstance","dispatchViewManagerCommand","Commands","cloneReactChildrenWithProps","children","propsToAdd","foundChildren","Array","isArray","filteredChildren","filter","child","Children","map","cloneElement","resolveImagePath","imageRef","res","uri","moduleName","startsWith","substring","toJSONString","json","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ViewPropTypes,\n  View,\n  NativeModules,\n  findNodeHandle,\n  Platform,\n} from 'react-native';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nfunction getAndroidManagerInstance(module) {\n  const haveViewManagerConfig =\n    NativeModules.UIManager && NativeModules.UIManager.getViewManagerConfig;\n  return haveViewManagerConfig\n    ? NativeModules.UIManager.getViewManagerConfig(module)\n    : NativeModules.UIManager[module];\n}\n\nfunction getIosManagerInstance(module) {\n  return NativeModules[getIOSModuleName(module)];\n}\n\nexport const viewPropTypes = ViewPropTypes || View.props;\n\nexport function isAndroid() {\n  return Platform.OS === 'android';\n}\n\nexport function existenceChange(cur, next) {\n  if (!cur && !next) {\n    return false;\n  }\n  return (!cur && next) || (cur && !next);\n}\n\nexport function isFunction(fn) {\n  return typeof fn === 'function';\n}\n\nexport function isNumber(num) {\n  return typeof num === 'number' && !Number.isNaN(num);\n}\n\nexport function isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\nexport function isString(str) {\n  return typeof str === 'string';\n}\n\nexport function isBoolean(bool) {\n  return typeof bool === 'boolean';\n}\n\nexport function isPrimitive(value) {\n  return isString(value) || isNumber(value) || isBoolean(value);\n}\n\nexport function runNativeCommand(module, name, nativeRef, args = []) {\n  const handle = findNodeHandle(nativeRef);\n  if (!handle) {\n    throw new Error(`Could not find handle for native ref ${module}.${name}`);\n  }\n\n  const managerInstance = isAndroid()\n    ? getAndroidManagerInstance(module)\n    : getIosManagerInstance(module);\n\n  if (!managerInstance) {\n    throw new Error(`Could not find ${module}`);\n  }\n\n  if (isAndroid()) {\n    return NativeModules.UIManager.dispatchViewManagerCommand(\n      handle,\n      managerInstance.Commands[name],\n      args,\n    );\n  }\n\n  return managerInstance[name](handle, ...args);\n}\n\nexport function cloneReactChildrenWithProps(children, propsToAdd = {}) {\n  if (!children) {\n    return null;\n  }\n\n  let foundChildren = null;\n\n  if (!Array.isArray(children)) {\n    foundChildren = [children];\n  } else {\n    foundChildren = children;\n  }\n\n  const filteredChildren = foundChildren.filter((child) => !!child); // filter out falsy children, since some can be null\n  return React.Children.map(filteredChildren, (child) =>\n    React.cloneElement(child, propsToAdd),\n  );\n}\n\nexport function resolveImagePath(imageRef) {\n  const res = resolveAssetSource(imageRef);\n  return res.uri;\n}\n\nexport function getIOSModuleName(moduleName) {\n  if (moduleName.startsWith('RCT')) {\n    return moduleName.substring(3);\n  }\n  return moduleName;\n}\n\nexport function toJSONString(json = '') {\n  return JSON.stringify(json);\n}\n"]},"metadata":{},"sourceType":"module"}