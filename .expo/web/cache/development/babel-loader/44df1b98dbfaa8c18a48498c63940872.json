{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/Images.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport { viewPropTypes } from \"../utils\";\nimport ShapeSource from \"./ShapeSource\";\nexport var NATIVE_MODULE_NAME = 'RCTMGLImages';\n\nfunction _isUrlOrPath(value) {\n  return (typeof value === 'string' || value instanceof String) && (value.startsWith('file://') || value.startsWith('http://') || value.startsWith('https://') || value.startsWith('data:') || value.startsWith('asset://') || value.startsWith('/'));\n}\n\nvar Images = function (_React$Component) {\n  _inherits(Images, _React$Component);\n\n  var _super = _createSuper(Images);\n\n  function Images() {\n    _classCallCheck(this, Images);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Images, [{\n    key: \"_getImages\",\n    value: function _getImages() {\n      if (!this.props.images && !this.props.nativeAssetImages) {\n        return {};\n      }\n\n      var images = {};\n      var nativeImages = [];\n\n      if (this.props.images) {\n        var imageNames = Object.keys(this.props.images);\n\n        for (var _i = 0, _imageNames = imageNames; _i < _imageNames.length; _i++) {\n          var imageName = _imageNames[_i];\n          var value = this.props.images[imageName];\n\n          if (imageName === ShapeSource.NATIVE_ASSETS_KEY && Array.isArray(value)) {\n            console.warn(\"Use of \" + ShapeSource.NATIVE_ASSETS_KEY + \" in Images#images is deprecated please use Images#nativeAssetImages\");\n            nativeImages = value;\n          } else if (_isUrlOrPath(value)) {\n            images[imageName] = value;\n          } else {\n            var res = resolveAssetSource(value);\n\n            if (res && res.uri) {\n              images[imageName] = res;\n            }\n          }\n        }\n      }\n\n      if (this.props.nativeAssetImages) {\n        nativeImages = this.props.nativeAssetImages;\n      }\n\n      return {\n        images: images,\n        nativeImages: nativeImages\n      };\n    }\n  }, {\n    key: \"_onImageMissing\",\n    value: function _onImageMissing(event) {\n      if (this.props.onImageMissing) {\n        this.props.onImageMissing(event.nativeEvent.payload.imageKey);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = _objectSpread({\n        id: this.props.id,\n        hasOnImageMissing: !!this.props.onImageMissing,\n        onImageMissing: this._onImageMissing.bind(this)\n      }, this._getImages());\n\n      return React.createElement(RCTMGLImages, _extends({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 12\n        }\n      }), this.props.children);\n    }\n  }]);\n\n  return Images;\n}(React.Component);\n\nImages.NATIVE_ASSETS_KEY = 'assets';\nImages.propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  images: PropTypes.object,\n  nativeAssetImages: PropTypes.arrayOf(PropTypes.string),\n  onImageMissing: PropTypes.func\n});\nvar RCTMGLImages = requireNativeComponent(NATIVE_MODULE_NAME, Images, {\n  nativeOnly: {\n    nativeImages: true,\n    onImageMissing: true\n  }\n});\nexport default Images;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/Images.js"],"names":["React","PropTypes","requireNativeComponent","resolveAssetSource","viewPropTypes","ShapeSource","NATIVE_MODULE_NAME","_isUrlOrPath","value","String","startsWith","Images","props","images","nativeAssetImages","nativeImages","imageNames","Object","keys","imageName","NATIVE_ASSETS_KEY","Array","isArray","console","warn","res","uri","event","onImageMissing","nativeEvent","payload","imageKey","id","hasOnImageMissing","_onImageMissing","bind","_getImages","children","Component","propTypes","object","arrayOf","string","func","RCTMGLImages","nativeOnly"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {requireNativeComponent} from 'react-native';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nimport {viewPropTypes} from '../utils';\n\nimport ShapeSource from './ShapeSource';\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLImages';\n\nfunction _isUrlOrPath(value) {\n  return (\n    (typeof value === 'string' || value instanceof String) &&\n    (value.startsWith('file://') ||\n      value.startsWith('http://') ||\n      value.startsWith('https://') ||\n      value.startsWith('data:') ||\n      value.startsWith('asset://') ||\n      value.startsWith('/'))\n  );\n}\n\n/**\n * Images defines the images used in Symbol etc layers\n */\nclass Images extends React.Component {\n  static NATIVE_ASSETS_KEY = 'assets';\n\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * Specifies the external images in key-value pairs required for the shape source.\n     * Keys are names - see iconImage expressions, values can be either urls-s objects\n     * with format {uri: 'http://...'}` or `require('image.png')` or `import 'image.png'`\n     */\n    images: PropTypes.object,\n\n    /**\n     * If you have an asset under Image.xcassets on iOS and the drawables directory on android\n     * you can specify an array of string names with assets as the key `['pin']`.\n     */\n    nativeAssetImages: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Gets called when a Layer is trying to render an image whose key is not present in\n     * any of the `Images` component of the Map.\n     */\n    onImageMissing: PropTypes.func,\n  };\n\n  _getImages() {\n    if (!this.props.images && !this.props.nativeAssetImages) {\n      return {};\n    }\n\n    const images = {};\n    let nativeImages = [];\n\n    if (this.props.images) {\n      const imageNames = Object.keys(this.props.images);\n      for (const imageName of imageNames) {\n        const value = this.props.images[imageName];\n        if (\n          imageName === ShapeSource.NATIVE_ASSETS_KEY &&\n          Array.isArray(value)\n        ) {\n          console.warn(\n            `Use of ${ShapeSource.NATIVE_ASSETS_KEY} in Images#images is deprecated please use Images#nativeAssetImages`,\n          );\n          nativeImages = value;\n        } else if (_isUrlOrPath(value)) {\n          images[imageName] = value;\n        } else {\n          const res = resolveAssetSource(value);\n          if (res && res.uri) {\n            images[imageName] = res;\n          }\n        }\n      }\n    }\n\n    if (this.props.nativeAssetImages) {\n      nativeImages = this.props.nativeAssetImages;\n    }\n\n    return {\n      images,\n      nativeImages,\n    };\n  }\n\n  _onImageMissing(event) {\n    if (this.props.onImageMissing) {\n      this.props.onImageMissing(event.nativeEvent.payload.imageKey);\n    }\n  }\n\n  render() {\n    const props = {\n      id: this.props.id,\n      hasOnImageMissing: !!this.props.onImageMissing,\n      onImageMissing: this._onImageMissing.bind(this),\n      ...this._getImages(),\n    };\n\n    return <RCTMGLImages {...props}>{this.props.children}</RCTMGLImages>;\n  }\n}\n\nconst RCTMGLImages = requireNativeComponent(NATIVE_MODULE_NAME, Images, {\n  nativeOnly: {\n    nativeImages: true,\n    onImageMissing: true,\n  },\n});\n\nexport default Images;\n"]},"metadata":{},"sourceType":"module"}