{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar MGLLogging = NativeModules.MGLLogging;\n\nvar Logger = function () {\n  function Logger() {\n    _classCallCheck(this, Logger);\n\n    this.loggerEmitter = new NativeEventEmitter(MGLLogging);\n    this.startedCount = 0;\n    this.logCallback = null;\n  }\n\n  _createClass(Logger, [{\n    key: \"setLogCallback\",\n    value: function setLogCallback(logCallback) {\n      this.logCallback = logCallback;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.startedCount === 0) {\n        this.subscribe();\n      }\n\n      this.startedCount += 1;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.startedCount -= 1;\n\n      if (this.startedCount === 0) {\n        this.unsubscribe();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var _this = this;\n\n      this.subscription = this.loggerEmitter.addListener('LogEvent', function (log) {\n        _this.onLog(log);\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.subscription.remove();\n      this.subscription = null;\n    }\n  }, {\n    key: \"effectiveLevel\",\n    value: function effectiveLevel(log) {\n      var level = log.level,\n          message = log.message,\n          tag = log.tag;\n\n      if (level === 'warning') {\n        if (tag === 'Mbgl-HttpRequest' && message.startsWith('Request failed due to a permanent error: Canceled')) {\n          return 'info';\n        }\n      }\n\n      return level;\n    }\n  }, {\n    key: \"onLog\",\n    value: function onLog(log) {\n      if (!this.logCallback || !this.logCallback(log)) {\n        var message = log.message;\n        var level = this.effectiveLevel(log);\n\n        if (level === 'error') {\n          console.error('Mapbox error', message, log);\n        } else if (level === 'warning') {\n          console.warn('Mapbox warning', message, log);\n        } else {\n          console.log(\"Mapbox [\" + level + \"]\", message, log);\n        }\n      }\n    }\n  }], [{\n    key: \"sharedInstance\",\n    value: function sharedInstance() {\n      if (this.instance === null) {\n        this.instance = new Logger();\n      }\n\n      return this.instance;\n    }\n  }, {\n    key: \"setLogCallback\",\n    value: function setLogCallback(logCallback) {\n      this.sharedInstance().setLogCallback(logCallback);\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(level) {\n      MGLLogging.setLogLevel(level);\n    }\n  }]);\n\n  return Logger;\n}();\n\nLogger.instance = null;\nexport default Logger;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/utils/Logger.js"],"names":["MGLLogging","NativeModules","Logger","loggerEmitter","NativeEventEmitter","startedCount","logCallback","subscribe","unsubscribe","subscription","addListener","log","onLog","remove","level","message","tag","startsWith","effectiveLevel","console","error","warn","instance","sharedInstance","setLogCallback","setLogLevel"],"mappings":";;;;AACA,IAAOA,UAAP,GAAqBC,aAArB,CAAOD,UAAP;;IAEME,M;AAUJ,oBAAc;AAAA;;AACZ,SAAKC,aAAL,GAAqB,IAAIC,kBAAJ,CAAuBJ,UAAvB,CAArB;AACA,SAAKK,YAAL,GAAoB,CAApB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACD;;;;WAgBD,wBAAeA,WAAf,EAA4B;AAC1B,WAAKA,WAAL,GAAmBA,WAAnB;AACD;;;WAuBD,iBAAQ;AACN,UAAI,KAAKD,YAAL,KAAsB,CAA1B,EAA6B;AAC3B,aAAKE,SAAL;AACD;;AACD,WAAKF,YAAL,IAAqB,CAArB;AACD;;;WAED,gBAAO;AACL,WAAKA,YAAL,IAAqB,CAArB;;AACA,UAAI,KAAKA,YAAL,KAAsB,CAA1B,EAA6B;AAC3B,aAAKG,WAAL;AACD;AACF;;;WAED,qBAAY;AAAA;;AACV,WAAKC,YAAL,GAAoB,KAAKN,aAAL,CAAmBO,WAAnB,CAA+B,UAA/B,EAA2C,UAACC,GAAD,EAAS;AACtE,QAAA,KAAI,CAACC,KAAL,CAAWD,GAAX;AACD,OAFmB,CAApB;AAGD;;;WAED,uBAAc;AACZ,WAAKF,YAAL,CAAkBI,MAAlB;AACA,WAAKJ,YAAL,GAAoB,IAApB;AACD;;;WAED,wBAAeE,GAAf,EAAoB;AAClB,UAAKG,KAAL,GAA4BH,GAA5B,CAAKG,KAAL;AAAA,UAAYC,OAAZ,GAA4BJ,GAA5B,CAAYI,OAAZ;AAAA,UAAqBC,GAArB,GAA4BL,GAA5B,CAAqBK,GAArB;;AAEA,UAAIF,KAAK,KAAK,SAAd,EAAyB;AACvB,YACEE,GAAG,KAAK,kBAAR,IACAD,OAAO,CAACE,UAAR,CAAmB,mDAAnB,CAFF,EAGE;AAEA,iBAAO,MAAP;AACD;AACF;;AACD,aAAOH,KAAP;AACD;;;WAED,eAAMH,GAAN,EAAW;AACT,UAAI,CAAC,KAAKL,WAAN,IAAqB,CAAC,KAAKA,WAAL,CAAiBK,GAAjB,CAA1B,EAAiD;AAC/C,YAAKI,OAAL,GAAgBJ,GAAhB,CAAKI,OAAL;AACA,YAAID,KAAK,GAAG,KAAKI,cAAL,CAAoBP,GAApB,CAAZ;;AACA,YAAIG,KAAK,KAAK,OAAd,EAAuB;AACrBK,UAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BL,OAA9B,EAAuCJ,GAAvC;AACD,SAFD,MAEO,IAAIG,KAAK,KAAK,SAAd,EAAyB;AAC9BK,UAAAA,OAAO,CAACE,IAAR,CAAa,gBAAb,EAA+BN,OAA/B,EAAwCJ,GAAxC;AACD,SAFM,MAEA;AACLQ,UAAAA,OAAO,CAACR,GAAR,cAAuBG,KAAvB,QAAiCC,OAAjC,EAA0CJ,GAA1C;AACD;AACF;AACF;;;WAxGD,0BAAwB;AACtB,UAAI,KAAKW,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,aAAKA,QAAL,GAAgB,IAAIpB,MAAJ,EAAhB;AACD;;AACD,aAAO,KAAKoB,QAAZ;AACD;;;WAaD,wBAAsBhB,WAAtB,EAAmC;AACjC,WAAKiB,cAAL,GAAsBC,cAAtB,CAAqClB,WAArC;AACD;;;WAwBD,qBAAmBQ,KAAnB,EAA0B;AACxBd,MAAAA,UAAU,CAACyB,WAAX,CAAuBX,KAAvB;AACD;;;;;;AAjDGZ,M,CACGoB,Q,GAAW,I;AA6GpB,eAAepB,MAAf","sourcesContent":["import {NativeEventEmitter, NativeModules} from 'react-native';\nconst {MGLLogging} = NativeModules;\n\nclass Logger {\n  static instance = null;\n\n  static sharedInstance() {\n    if (this.instance === null) {\n      this.instance = new Logger();\n    }\n    return this.instance;\n  }\n\n  constructor() {\n    this.loggerEmitter = new NativeEventEmitter(MGLLogging);\n    this.startedCount = 0;\n    this.logCallback = null;\n  }\n\n  /**\n   * Set custom logger function.\n   * @param {Logger~logCallback} logCallback - callback taking a log object as param. If callback return falsy value then\n   * default logging will take place.\n   */\n  static setLogCallback(logCallback) {\n    this.sharedInstance().setLogCallback(logCallback);\n  }\n\n  /**\n   * Set custom logger function.\n   * @param {Logger~logCallback} logCallback - callback taking a log object as param. If callback return falsy value then\n   * default logging will take place.\n   */\n  setLogCallback(logCallback) {\n    this.logCallback = logCallback;\n  }\n\n  /**\n   * This callback is displayed as part of the Requester class.\n   * @callback Logger~logCallback\n   * @param {object} log\n   * @param {string} log.message - the message of the log\n   * @param {string} log.level - log level\n   * @param {string} log.tag - optional tag used on android\n   */\n\n  /**\n   * setLogLevel\n   * @param {LogLevel} level\n   */\n  static setLogLevel(level) {\n    MGLLogging.setLogLevel(level);\n  }\n\n  /**\n   * @type {('error'|'warning'|'info'|'debug'|'verbose')} LogLevel - Supported log levels\n   */\n\n  start() {\n    if (this.startedCount === 0) {\n      this.subscribe();\n    }\n    this.startedCount += 1;\n  }\n\n  stop() {\n    this.startedCount -= 1;\n    if (this.startedCount === 0) {\n      this.unsubscribe();\n    }\n  }\n\n  subscribe() {\n    this.subscription = this.loggerEmitter.addListener('LogEvent', (log) => {\n      this.onLog(log);\n    });\n  }\n\n  unsubscribe() {\n    this.subscription.remove();\n    this.subscription = null;\n  }\n\n  effectiveLevel(log) {\n    let {level, message, tag} = log;\n\n    if (level === 'warning') {\n      if (\n        tag === 'Mbgl-HttpRequest' &&\n        message.startsWith('Request failed due to a permanent error: Canceled')\n      ) {\n        // this seems to happening too much to show a warning every time\n        return 'info';\n      }\n    }\n    return level;\n  }\n\n  onLog(log) {\n    if (!this.logCallback || !this.logCallback(log)) {\n      let {message} = log;\n      let level = this.effectiveLevel(log);\n      if (level === 'error') {\n        console.error('Mapbox error', message, log);\n      } else if (level === 'warning') {\n        console.warn('Mapbox warning', message, log);\n      } else {\n        console.log(`Mapbox [${level}]`, message, log);\n      }\n    }\n  }\n}\n\nexport default Logger;\n"]},"metadata":{},"sourceType":"module"}