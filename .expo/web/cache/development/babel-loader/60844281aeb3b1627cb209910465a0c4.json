{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { runNativeCommand, isAndroid } from \"../utils\";\nvar callbackIncrement = 0;\n\nvar NativeBridgeComponent = function NativeBridgeComponent(B) {\n  return function (_B) {\n    _inherits(_class, _B);\n\n    var _super = _createSuper(_class);\n\n    function _class(props, nativeModuleName) {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      _this = _super.call(this, props);\n      _this._nativeModuleName = nativeModuleName;\n      _this._onAndroidCallback = _this._onAndroidCallback.bind(_assertThisInitialized(_this));\n      _this._callbackMap = new Map();\n      _this._preRefMapMethodQueue = [];\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: \"_addAddAndroidCallback\",\n      value: function _addAddAndroidCallback(id, resolve, reject) {\n        this._callbackMap.set(id, {\n          resolve: resolve,\n          reject: reject\n        });\n      }\n    }, {\n      key: \"_removeAndroidCallback\",\n      value: function _removeAndroidCallback(id) {\n        this._callbackMap.remove(id);\n      }\n    }, {\n      key: \"_onAndroidCallback\",\n      value: function _onAndroidCallback(e) {\n        var callbackID = e.nativeEvent.type;\n\n        var callback = this._callbackMap.get(callbackID);\n\n        if (!callback) {\n          return;\n        }\n\n        this._callbackMap.delete(callbackID);\n\n        var payload = e.nativeEvent.payload;\n\n        if (payload.error) {\n          callback.reject.call(null, new Error(payload.error));\n        } else {\n          callback.resolve.call(null, payload);\n        }\n      }\n    }, {\n      key: \"_runPendingNativeCommands\",\n      value: function _runPendingNativeCommands(nativeRef) {\n        var item, res;\n        return _regeneratorRuntime.async(function _runPendingNativeCommands$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!nativeRef) {\n                  _context.next = 10;\n                  break;\n                }\n\n              case 1:\n                if (!(this._preRefMapMethodQueue.length > 0)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                item = this._preRefMapMethodQueue.pop();\n\n                if (!(item && item.method && item.resolver)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 6;\n                return _regeneratorRuntime.awrap(this._runNativeCommand(item.method.name, nativeRef, item.method.args));\n\n              case 6:\n                res = _context.sent;\n                item.resolver(res);\n\n              case 8:\n                _context.next = 1;\n                break;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"_runNativeCommand\",\n      value: function _runNativeCommand(methodName, nativeRef) {\n        var _this2 = this;\n\n        var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n        if (!nativeRef) {\n          return new Promise(function (resolve) {\n            _this2._preRefMapMethodQueue.push({\n              method: {\n                name: methodName,\n                args: args\n              },\n              resolver: resolve\n            });\n          });\n        }\n\n        if (isAndroid()) {\n          return new Promise(function (resolve, reject) {\n            callbackIncrement += 1;\n            var callbackID = methodName + \"_\" + callbackIncrement;\n\n            _this2._addAddAndroidCallback(callbackID, resolve, reject);\n\n            args.unshift(callbackID);\n            runNativeCommand(_this2._nativeModuleName, methodName, nativeRef, args);\n          });\n        }\n\n        return runNativeCommand(this._nativeModuleName, methodName, nativeRef, args);\n      }\n    }]);\n\n    return _class;\n  }(B);\n};\n\nexport default NativeBridgeComponent;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/NativeBridgeComponent.js"],"names":["runNativeCommand","isAndroid","callbackIncrement","NativeBridgeComponent","B","props","nativeModuleName","_nativeModuleName","_onAndroidCallback","bind","_callbackMap","Map","_preRefMapMethodQueue","id","resolve","reject","set","remove","e","callbackID","nativeEvent","type","callback","get","delete","payload","error","call","Error","nativeRef","length","item","pop","method","resolver","_runNativeCommand","name","args","res","methodName","Promise","push","_addAddAndroidCallback","unshift"],"mappings":"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","sourcesContent":["import {runNativeCommand, isAndroid} from '../utils';\n\nlet callbackIncrement = 0;\n\nconst NativeBridgeComponent = (B) =>\n  class extends B {\n    constructor(props, nativeModuleName) {\n      super(props);\n\n      this._nativeModuleName = nativeModuleName;\n      this._onAndroidCallback = this._onAndroidCallback.bind(this);\n      this._callbackMap = new Map();\n      this._preRefMapMethodQueue = [];\n    }\n\n    _addAddAndroidCallback(id, resolve, reject) {\n      this._callbackMap.set(id, {resolve, reject});\n    }\n\n    _removeAndroidCallback(id) {\n      this._callbackMap.remove(id);\n    }\n\n    _onAndroidCallback(e) {\n      const callbackID = e.nativeEvent.type;\n      const callback = this._callbackMap.get(callbackID);\n\n      if (!callback) {\n        return;\n      }\n\n      this._callbackMap.delete(callbackID);\n      let {payload} = e.nativeEvent;\n      if (payload.error) {\n        callback.reject.call(null, new Error(payload.error));\n      } else {\n        callback.resolve.call(null, payload);\n      }\n    }\n\n    async _runPendingNativeCommands(nativeRef) {\n      if (nativeRef) {\n        while (this._preRefMapMethodQueue.length > 0) {\n          const item = this._preRefMapMethodQueue.pop();\n\n          if (item && item.method && item.resolver) {\n            const res = await this._runNativeCommand(\n              item.method.name,\n              nativeRef,\n              item.method.args,\n            );\n            item.resolver(res);\n          }\n        }\n      }\n    }\n\n    _runNativeCommand(methodName, nativeRef, args = []) {\n      if (!nativeRef) {\n        return new Promise((resolve) => {\n          this._preRefMapMethodQueue.push({\n            method: {name: methodName, args},\n            resolver: resolve,\n          });\n        });\n      }\n\n      if (isAndroid()) {\n        return new Promise((resolve, reject) => {\n          callbackIncrement += 1;\n          const callbackID = `${methodName}_${callbackIncrement}`;\n          this._addAddAndroidCallback(callbackID, resolve, reject);\n          args.unshift(callbackID);\n          runNativeCommand(this._nativeModuleName, methodName, nativeRef, args);\n        });\n      }\n      return runNativeCommand(\n        this._nativeModuleName,\n        methodName,\n        nativeRef,\n        args,\n      );\n    }\n  };\n\nexport default NativeBridgeComponent;\n"]},"metadata":{},"sourceType":"module"}