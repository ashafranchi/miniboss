{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { featureCollection, point, feature, lineString } from '@turf/helpers';\nimport distance from '@turf/distance';\nimport along from '@turf/along';\nimport geoViewport from '@mapbox/geo-viewport';\nvar VECTOR_TILE_SIZE = 512;\nexport function makePoint(coordinates, properties, options) {\n  return point(coordinates, properties, options);\n}\nexport function makeLineString(coordinates, properties, options) {\n  return lineString(coordinates, properties, options);\n}\nexport function makeLatLngBounds(northEastCoordinates, southWestCoordinates) {\n  return featureCollection([point(northEastCoordinates), point(southWestCoordinates)]);\n}\nexport function makeFeature(geometry, properties) {\n  return feature(geometry, properties);\n}\nexport function makeFeatureCollection() {\n  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  return featureCollection(features, options);\n}\nexport function addToFeatureCollection(newFeatureCollection, newFeature) {\n  return _objectSpread(_objectSpread({}, newFeatureCollection), {}, {\n    features: [].concat(_toConsumableArray(newFeatureCollection.features), [newFeature])\n  });\n}\nexport function calculateDistance(origin, dest, options) {\n  return distance(origin, dest, options);\n}\nexport function pointAlongLine(newLineString, distAlong, options) {\n  return along(newLineString, distAlong, options);\n}\nexport function getOrCalculateVisibleRegion(coord, zoomLevel, width, height, nativeRegion) {\n  var region = {\n    ne: [0, 0],\n    sw: [0, 0]\n  };\n\n  if (!nativeRegion || !Array.isArray(nativeRegion.visibleBounds)) {\n    var bounds = geoViewport.bounds(coord, zoomLevel, [width, height], VECTOR_TILE_SIZE);\n    region.ne = [bounds[3], bounds[2]];\n    region.sw = [bounds[1], bounds[0]];\n  } else {\n    region.ne = nativeRegion.properties.visibleBounds[0];\n    region.sw = nativeRegion.properties.visibleBounds[1];\n  }\n\n  return region;\n}","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/utils/geoUtils.js"],"names":["featureCollection","point","feature","lineString","distance","along","geoViewport","VECTOR_TILE_SIZE","makePoint","coordinates","properties","options","makeLineString","makeLatLngBounds","northEastCoordinates","southWestCoordinates","makeFeature","geometry","makeFeatureCollection","features","addToFeatureCollection","newFeatureCollection","newFeature","calculateDistance","origin","dest","pointAlongLine","newLineString","distAlong","getOrCalculateVisibleRegion","coord","zoomLevel","width","height","nativeRegion","region","ne","sw","Array","isArray","visibleBounds","bounds"],"mappings":";;;;;;;AAAA,SAAQA,iBAAR,EAA2BC,KAA3B,EAAkCC,OAAlC,EAA2CC,UAA3C,QAA4D,eAA5D;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,IAAMC,gBAAgB,GAAG,GAAzB;AAEA,OAAO,SAASC,SAAT,CAAmBC,WAAnB,EAAgCC,UAAhC,EAA4CC,OAA5C,EAAqD;AAC1D,SAAOV,KAAK,CAACQ,WAAD,EAAcC,UAAd,EAA0BC,OAA1B,CAAZ;AACD;AAED,OAAO,SAASC,cAAT,CAAwBH,WAAxB,EAAqCC,UAArC,EAAiDC,OAAjD,EAA0D;AAC/D,SAAOR,UAAU,CAACM,WAAD,EAAcC,UAAd,EAA0BC,OAA1B,CAAjB;AACD;AAED,OAAO,SAASE,gBAAT,CAA0BC,oBAA1B,EAAgDC,oBAAhD,EAAsE;AAC3E,SAAOf,iBAAiB,CAAC,CACvBC,KAAK,CAACa,oBAAD,CADkB,EAEvBb,KAAK,CAACc,oBAAD,CAFkB,CAAD,CAAxB;AAID;AAED,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+BP,UAA/B,EAA2C;AAChD,SAAOR,OAAO,CAACe,QAAD,EAAWP,UAAX,CAAd;AACD;AAED,OAAO,SAASQ,qBAAT,GAAuD;AAAA,MAAxBC,QAAwB,uEAAb,EAAa;AAAA,MAATR,OAAS;AAC5D,SAAOX,iBAAiB,CAACmB,QAAD,EAAWR,OAAX,CAAxB;AACD;AAED,OAAO,SAASS,sBAAT,CAAgCC,oBAAhC,EAAsDC,UAAtD,EAAkE;AACvE,yCACKD,oBADL;AAEEF,IAAAA,QAAQ,+BAAME,oBAAoB,CAACF,QAA3B,IAAqCG,UAArC;AAFV;AAID;AAED,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCd,OAAzC,EAAkD;AACvD,SAAOP,QAAQ,CAACoB,MAAD,EAASC,IAAT,EAAed,OAAf,CAAf;AACD;AAED,OAAO,SAASe,cAAT,CAAwBC,aAAxB,EAAuCC,SAAvC,EAAkDjB,OAAlD,EAA2D;AAChE,SAAON,KAAK,CAACsB,aAAD,EAAgBC,SAAhB,EAA2BjB,OAA3B,CAAZ;AACD;AAED,OAAO,SAASkB,2BAAT,CACLC,KADK,EAELC,SAFK,EAGLC,KAHK,EAILC,MAJK,EAKLC,YALK,EAML;AACA,MAAMC,MAAM,GAAG;AACbC,IAAAA,EAAE,EAAE,CAAC,CAAD,EAAI,CAAJ,CADS;AAEbC,IAAAA,EAAE,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFS,GAAf;;AAKA,MAAI,CAACH,YAAD,IAAiB,CAACI,KAAK,CAACC,OAAN,CAAcL,YAAY,CAACM,aAA3B,CAAtB,EAAiE;AAC/D,QAAMC,MAAM,GAAGnC,WAAW,CAACmC,MAAZ,CACbX,KADa,EAEbC,SAFa,EAGb,CAACC,KAAD,EAAQC,MAAR,CAHa,EAIb1B,gBAJa,CAAf;AAMA4B,IAAAA,MAAM,CAACC,EAAP,GAAY,CAACK,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAAZ;AACAN,IAAAA,MAAM,CAACE,EAAP,GAAY,CAACI,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAAZ;AACD,GATD,MASO;AACLN,IAAAA,MAAM,CAACC,EAAP,GAAYF,YAAY,CAACxB,UAAb,CAAwB8B,aAAxB,CAAsC,CAAtC,CAAZ;AACAL,IAAAA,MAAM,CAACE,EAAP,GAAYH,YAAY,CAACxB,UAAb,CAAwB8B,aAAxB,CAAsC,CAAtC,CAAZ;AACD;;AAED,SAAOL,MAAP;AACD","sourcesContent":["import {featureCollection, point, feature, lineString} from '@turf/helpers';\nimport distance from '@turf/distance';\nimport along from '@turf/along';\nimport geoViewport from '@mapbox/geo-viewport';\n\nconst VECTOR_TILE_SIZE = 512;\n\nexport function makePoint(coordinates, properties, options) {\n  return point(coordinates, properties, options);\n}\n\nexport function makeLineString(coordinates, properties, options) {\n  return lineString(coordinates, properties, options);\n}\n\nexport function makeLatLngBounds(northEastCoordinates, southWestCoordinates) {\n  return featureCollection([\n    point(northEastCoordinates),\n    point(southWestCoordinates),\n  ]);\n}\n\nexport function makeFeature(geometry, properties) {\n  return feature(geometry, properties);\n}\n\nexport function makeFeatureCollection(features = [], options) {\n  return featureCollection(features, options);\n}\n\nexport function addToFeatureCollection(newFeatureCollection, newFeature) {\n  return {\n    ...newFeatureCollection,\n    features: [...newFeatureCollection.features, newFeature],\n  };\n}\n\nexport function calculateDistance(origin, dest, options) {\n  return distance(origin, dest, options);\n}\n\nexport function pointAlongLine(newLineString, distAlong, options) {\n  return along(newLineString, distAlong, options);\n}\n\nexport function getOrCalculateVisibleRegion(\n  coord,\n  zoomLevel,\n  width,\n  height,\n  nativeRegion,\n) {\n  const region = {\n    ne: [0, 0],\n    sw: [0, 0],\n  };\n\n  if (!nativeRegion || !Array.isArray(nativeRegion.visibleBounds)) {\n    const bounds = geoViewport.bounds(\n      coord,\n      zoomLevel,\n      [width, height],\n      VECTOR_TILE_SIZE,\n    );\n    region.ne = [bounds[3], bounds[2]];\n    region.sw = [bounds[1], bounds[0]];\n  } else {\n    region.ne = nativeRegion.properties.visibleBounds[0];\n    region.sw = nativeRegion.properties.visibleBounds[1];\n  }\n\n  return region;\n}\n"]},"metadata":{},"sourceType":"module"}