{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/MapView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { debounce } from 'debounce';\nimport { makePoint, makeLatLngBounds } from \"../utils/geoUtils\";\nimport { isFunction, isNumber, toJSONString, isAndroid, viewPropTypes } from \"../utils\";\nimport { getFilter } from \"../utils/filterUtils\";\nimport Logger from \"../utils/Logger\";\nimport NativeBridgeComponent from \"./NativeBridgeComponent\";\nvar MapboxGL = NativeModules.MGLModule;\n\nif (MapboxGL == null) {\n  console.error('Native part of Mapbox React Native libraries were not registered properly, double check our native installation guides.');\n}\n\nexport var NATIVE_MODULE_NAME = 'RCTMGLMapView';\nexport var ANDROID_TEXTURE_NATIVE_MODULE_NAME = 'RCTMGLAndroidTextureMapView';\nvar styles = StyleSheet.create({\n  matchParent: {\n    flex: 1\n  }\n});\nvar defaultStyleURL = MapboxGL.StyleURL.Street;\n\nvar MapView = function (_NativeBridgeComponen) {\n  _inherits(MapView, _NativeBridgeComponen);\n\n  var _super = _createSuper(MapView);\n\n  function MapView(props) {\n    var _this;\n\n    _classCallCheck(this, MapView);\n\n    _this = _super.call(this, props, NATIVE_MODULE_NAME);\n    _this.logger = Logger.sharedInstance();\n\n    _this.logger.start();\n\n    _this.state = {\n      isReady: null,\n      region: null,\n      width: 0,\n      height: 0,\n      isUserInteraction: false\n    };\n    _this._onPress = _this._onPress.bind(_assertThisInitialized(_this));\n    _this._onLongPress = _this._onLongPress.bind(_assertThisInitialized(_this));\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_this));\n    _this._onLayout = _this._onLayout.bind(_assertThisInitialized(_this));\n    _this._onDebouncedRegionWillChange = debounce(_this._onRegionWillChange.bind(_assertThisInitialized(_this)), props.regionWillChangeDebounceTime, true);\n    _this._onDebouncedRegionDidChange = debounce(_this._onRegionDidChange.bind(_assertThisInitialized(_this)), props.regionDidChangeDebounceTime);\n    return _this;\n  }\n\n  _createClass(MapView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._setHandledMapChangedEvents(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._onDebouncedRegionWillChange.clear();\n\n      this._onDebouncedRegionDidChange.clear();\n\n      this.logger.stop();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this._setHandledMapChangedEvents(nextProps);\n    }\n  }, {\n    key: \"_setHandledMapChangedEvents\",\n    value: function _setHandledMapChangedEvents(props) {\n      if (isAndroid()) {\n        var events = [];\n\n        if (props.onRegionWillChange) {\n          events.push(MapboxGL.EventTypes.RegionWillChange);\n        }\n\n        if (props.onRegionIsChanging) {\n          events.push(MapboxGL.EventTypes.RegionIsChanging);\n        }\n\n        if (props.onRegionDidChange) {\n          events.push(MapboxGL.EventTypes.RegionDidChange);\n        }\n\n        if (props.onUserLocationUpdate) {\n          events.push(MapboxGL.EventTypes.UserLocationUpdated);\n        }\n\n        if (props.onWillStartLoadingMap) {\n          events.push(MapboxGL.EventTypes.WillStartLoadingMap);\n        }\n\n        if (props.onDidFinishLoadingMap) {\n          events.push(MapboxGL.EventTypes.DidFinishLoadingMap);\n        }\n\n        if (props.onDidFailLoadingMap) {\n          events.push(MapboxGL.EventTypes.DidFailLoadingMap);\n        }\n\n        if (props.onWillStartRenderingFrame) {\n          events.push(MapboxGL.EventTypes.WillStartRenderingFrame);\n        }\n\n        if (props.onDidFinishRenderingFrame) {\n          events.push(MapboxGL.EventTypes.DidFinishRenderingFrame);\n        }\n\n        if (props.onDidFinishRenderingFrameFully) {\n          events.push(MapboxGL.EventTypes.DidFinishRenderingFrameFully);\n        }\n\n        if (props.onWillStartRenderingMap) {\n          events.push(MapboxGL.EventTypes.WillStartRenderingMap);\n        }\n\n        if (props.onDidFinishRenderingMap) {\n          events.push(MapboxGL.EventTypes.DidFinishRenderingMap);\n        }\n\n        if (props.onDidFinishRenderingMapFully) {\n          events.push(MapboxGL.EventTypes.DidFinishRenderingMapFully);\n        }\n\n        if (props.onDidFinishLoadingStyle) {\n          events.push(MapboxGL.EventTypes.DidFinishLoadingStyle);\n        }\n\n        this._runNativeCommand('setHandledMapChangedEvents', this._nativeRef, events);\n      }\n    }\n  }, {\n    key: \"getPointInView\",\n    value: function getPointInView(coordinate) {\n      var res;\n      return _regeneratorRuntime.async(function getPointInView$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('getPointInView', this._nativeRef, [coordinate]));\n\n            case 2:\n              res = _context.sent;\n              return _context.abrupt(\"return\", res.pointInView);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getCoordinateFromView\",\n    value: function getCoordinateFromView(point) {\n      var res;\n      return _regeneratorRuntime.async(function getCoordinateFromView$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('getCoordinateFromView', this._nativeRef, [point]));\n\n            case 2:\n              res = _context2.sent;\n              return _context2.abrupt(\"return\", res.coordinateFromView);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getVisibleBounds\",\n    value: function getVisibleBounds() {\n      var res;\n      return _regeneratorRuntime.async(function getVisibleBounds$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('getVisibleBounds', this._nativeRef));\n\n            case 2:\n              res = _context3.sent;\n              return _context3.abrupt(\"return\", res.visibleBounds);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"queryRenderedFeaturesAtPoint\",\n    value: function queryRenderedFeaturesAtPoint(coordinate) {\n      var filter,\n          layerIDs,\n          res,\n          _args4 = arguments;\n      return _regeneratorRuntime.async(function queryRenderedFeaturesAtPoint$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              filter = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : [];\n              layerIDs = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : [];\n\n              if (!(!coordinate || coordinate.length < 2)) {\n                _context4.next = 4;\n                break;\n              }\n\n              throw new Error('Must pass in valid coordinate[lng, lat]');\n\n            case 4:\n              _context4.next = 6;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('queryRenderedFeaturesAtPoint', this._nativeRef, [coordinate, getFilter(filter), layerIDs]));\n\n            case 6:\n              res = _context4.sent;\n\n              if (!isAndroid()) {\n                _context4.next = 9;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", JSON.parse(res.data));\n\n            case 9:\n              return _context4.abrupt(\"return\", res.data);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"queryRenderedFeaturesInRect\",\n    value: function queryRenderedFeaturesInRect(bbox) {\n      var filter,\n          layerIDs,\n          res,\n          _args5 = arguments;\n      return _regeneratorRuntime.async(function queryRenderedFeaturesInRect$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              filter = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];\n              layerIDs = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : [];\n\n              if (!(!bbox || bbox.length !== 4)) {\n                _context5.next = 4;\n                break;\n              }\n\n              throw new Error('Must pass in a valid bounding box[top, right, bottom, left]');\n\n            case 4:\n              _context5.next = 6;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('queryRenderedFeaturesInRect', this._nativeRef, [bbox, getFilter(filter), layerIDs]));\n\n            case 6:\n              res = _context5.sent;\n\n              if (!isAndroid()) {\n                _context5.next = 9;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", JSON.parse(res.data));\n\n            case 9:\n              return _context5.abrupt(\"return\", res.data);\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setCamera\",\n    value: function setCamera() {\n      console.warn('MapView.setCamera is deprecated - please use Camera#setCamera');\n    }\n  }, {\n    key: \"takeSnap\",\n    value: function takeSnap() {\n      var writeToDisk,\n          res,\n          _args6 = arguments;\n      return _regeneratorRuntime.async(function takeSnap$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              writeToDisk = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;\n              _context6.next = 3;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('takeSnap', this._nativeRef, [writeToDisk]));\n\n            case 3:\n              res = _context6.sent;\n              return _context6.abrupt(\"return\", res.uri);\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      var res;\n      return _regeneratorRuntime.async(function getZoom$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('getZoom', this._nativeRef));\n\n            case 2:\n              res = _context7.sent;\n              return _context7.abrupt(\"return\", res.zoom);\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var res;\n      return _regeneratorRuntime.async(function getCenter$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('getCenter', this._nativeRef));\n\n            case 2:\n              res = _context8.sent;\n              return _context8.abrupt(\"return\", res.center);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setSourceVisibility\",\n    value: function setSourceVisibility(visible, sourceId) {\n      var sourceLayerId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      this._runNativeCommand('setSourceVisibility', this._nativeRef, [visible, sourceId, sourceLayerId]);\n    }\n  }, {\n    key: \"showAttribution\",\n    value: function showAttribution() {\n      return this._runNativeCommand('showAttribution', this._nativeRef);\n    }\n  }, {\n    key: \"_createStopConfig\",\n    value: function _createStopConfig() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var stopConfig = {\n        mode: isNumber(config.mode) ? config.mode : MapboxGL.CameraModes.Ease,\n        pitch: config.pitch,\n        heading: config.heading,\n        duration: config.duration || 2000,\n        zoom: config.zoom\n      };\n\n      if (config.centerCoordinate) {\n        stopConfig.centerCoordinate = toJSONString(makePoint(config.centerCoordinate));\n      }\n\n      if (config.bounds && config.bounds.ne && config.bounds.sw) {\n        var _config$bounds = config.bounds,\n            ne = _config$bounds.ne,\n            sw = _config$bounds.sw,\n            paddingLeft = _config$bounds.paddingLeft,\n            paddingRight = _config$bounds.paddingRight,\n            paddingTop = _config$bounds.paddingTop,\n            paddingBottom = _config$bounds.paddingBottom;\n        stopConfig.bounds = toJSONString(makeLatLngBounds(ne, sw));\n        stopConfig.boundsPaddingTop = paddingTop || 0;\n        stopConfig.boundsPaddingRight = paddingRight || 0;\n        stopConfig.boundsPaddingBottom = paddingBottom || 0;\n        stopConfig.boundsPaddingLeft = paddingLeft || 0;\n      }\n\n      return stopConfig;\n    }\n  }, {\n    key: \"_onPress\",\n    value: function _onPress(e) {\n      if (isFunction(this.props.onPress)) {\n        this.props.onPress(e.nativeEvent.payload);\n      }\n    }\n  }, {\n    key: \"_onLongPress\",\n    value: function _onLongPress(e) {\n      if (isFunction(this.props.onLongPress)) {\n        this.props.onLongPress(e.nativeEvent.payload);\n      }\n    }\n  }, {\n    key: \"_onRegionWillChange\",\n    value: function _onRegionWillChange(payload) {\n      if (isFunction(this.props.onRegionWillChange)) {\n        this.props.onRegionWillChange(payload);\n      }\n\n      this.setState({\n        isUserInteraction: payload.properties.isUserInteraction\n      });\n    }\n  }, {\n    key: \"_onRegionDidChange\",\n    value: function _onRegionDidChange(payload) {\n      if (isFunction(this.props.onRegionDidChange)) {\n        this.props.onRegionDidChange(payload);\n      }\n\n      this.setState({\n        region: payload\n      });\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(e) {\n      var _this$props = this.props,\n          regionWillChangeDebounceTime = _this$props.regionWillChangeDebounceTime,\n          regionDidChangeDebounceTime = _this$props.regionDidChangeDebounceTime;\n      var _e$nativeEvent = e.nativeEvent,\n          type = _e$nativeEvent.type,\n          payload = _e$nativeEvent.payload;\n      var propName = '';\n\n      switch (type) {\n        case MapboxGL.EventTypes.RegionWillChange:\n          if (regionWillChangeDebounceTime > 0) {\n            this._onDebouncedRegionWillChange(payload);\n          } else {\n            propName = 'onRegionWillChange';\n          }\n\n          break;\n\n        case MapboxGL.EventTypes.RegionIsChanging:\n          propName = 'onRegionIsChanging';\n          break;\n\n        case MapboxGL.EventTypes.RegionDidChange:\n          if (regionDidChangeDebounceTime > 0) {\n            this._onDebouncedRegionDidChange(payload);\n          } else {\n            propName = 'onRegionDidChange';\n          }\n\n          break;\n\n        case MapboxGL.EventTypes.UserLocationUpdated:\n          propName = 'onUserLocationUpdate';\n          break;\n\n        case MapboxGL.EventTypes.WillStartLoadingMap:\n          propName = 'onWillStartLoadingMap';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishLoadingMap:\n          propName = 'onDidFinishLoadingMap';\n          break;\n\n        case MapboxGL.EventTypes.DidFailLoadingMap:\n          propName = 'onDidFailLoadingMap';\n          break;\n\n        case MapboxGL.EventTypes.WillStartRenderingFrame:\n          propName = 'onWillStartRenderingFrame';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishRenderingFrame:\n          propName = 'onDidFinishRenderingFrame';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishRenderingFrameFully:\n          propName = 'onDidFinishRenderingFrameFully';\n          break;\n\n        case MapboxGL.EventTypes.WillStartRenderingMap:\n          propName = 'onWillStartRenderingMap';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishRenderingMap:\n          propName = 'onDidFinishRenderingMap';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishRenderingMapFully:\n          propName = 'onDidFinishRenderingMapFully';\n          break;\n\n        case MapboxGL.EventTypes.DidFinishLoadingStyle:\n          propName = 'onDidFinishLoadingStyle';\n          break;\n\n        default:\n          console.warn('Unhandled event callback type', type);\n      }\n\n      if (propName.length) {\n        this._handleOnChange(propName, payload);\n      }\n    }\n  }, {\n    key: \"_onLayout\",\n    value: function _onLayout(e) {\n      this.setState({\n        isReady: true,\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height\n      });\n    }\n  }, {\n    key: \"_handleOnChange\",\n    value: function _handleOnChange(propName, payload) {\n      if (isFunction(this.props[propName])) {\n        this.props[propName](payload);\n      }\n    }\n  }, {\n    key: \"_getCenterCoordinate\",\n    value: function _getCenterCoordinate() {\n      if (!this.props.centerCoordinate) {\n        return;\n      }\n\n      return toJSONString(makePoint(this.props.centerCoordinate));\n    }\n  }, {\n    key: \"_getVisibleCoordinateBounds\",\n    value: function _getVisibleCoordinateBounds() {\n      if (!this.props.visibleCoordinateBounds) {\n        return;\n      }\n\n      return toJSONString(makeLatLngBounds(this.props.visibleCoordinateBounds[0], this.props.visibleCoordinateBounds[1]));\n    }\n  }, {\n    key: \"_getContentInset\",\n    value: function _getContentInset() {\n      if (!this.props.contentInset) {\n        return;\n      }\n\n      if (!Array.isArray(this.props.contentInset)) {\n        return [this.props.contentInset];\n      }\n\n      return this.props.contentInset;\n    }\n  }, {\n    key: \"_setNativeRef\",\n    value: function _setNativeRef(nativeRef) {\n      this._nativeRef = nativeRef;\n\n      _get(_getPrototypeOf(MapView.prototype), \"_runPendingNativeCommands\", this).call(this, nativeRef);\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      if (this._nativeRef) {\n        this._nativeRef.setNativeProps(props);\n      }\n    }\n  }, {\n    key: \"_setStyleURL\",\n    value: function _setStyleURL(props) {\n      if (props.styleURL) {\n        return;\n      }\n\n      if (props.styleJSON && !props.styleURL) {\n        props.styleURL = props.styleJSON;\n      }\n\n      if (!props.styleJSON || !props.styleURL) {\n        props.styleURL = defaultStyleURL;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = _objectSpread(_objectSpread({}, this.props), {}, {\n        contentInset: this._getContentInset(),\n        style: styles.matchParent\n      });\n\n      this._setStyleURL(props);\n\n      var callbacks = {\n        ref: function ref(nativeRef) {\n          return _this2._setNativeRef(nativeRef);\n        },\n        onPress: this._onPress,\n        onLongPress: this._onLongPress,\n        onMapChange: this._onChange,\n        onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined\n      };\n      var mapView = null;\n\n      if (isAndroid() && !this.props.surfaceView && this.state.isReady) {\n        mapView = React.createElement(RCTMGLAndroidTextureMapView, _extends({}, props, callbacks, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 782,\n            columnNumber: 9\n          }\n        }), this.props.children);\n      } else if (this.state.isReady) {\n        mapView = React.createElement(RCTMGLMapView, _extends({}, props, callbacks, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 9\n          }\n        }), this.props.children);\n      }\n\n      return React.createElement(View, {\n        onLayout: this._onLayout,\n        style: this.props.style,\n        testID: mapView ? null : this.props.testID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 7\n        }\n      }, mapView);\n    }\n  }]);\n\n  return MapView;\n}(NativeBridgeComponent(React.Component));\n\nMapView.propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  contentInset: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  style: PropTypes.any,\n  styleURL: PropTypes.string,\n  styleJSON: PropTypes.string,\n  preferredFramesPerSecond: PropTypes.number,\n  localizeLabels: PropTypes.bool,\n  zoomEnabled: PropTypes.bool,\n  scrollEnabled: PropTypes.bool,\n  pitchEnabled: PropTypes.bool,\n  rotateEnabled: PropTypes.bool,\n  attributionEnabled: PropTypes.bool,\n  attributionPosition: PropTypes.oneOfType([PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number\n  }), PropTypes.shape({\n    top: PropTypes.number,\n    right: PropTypes.number\n  }), PropTypes.shape({\n    bottom: PropTypes.number,\n    left: PropTypes.number\n  }), PropTypes.shape({\n    bottom: PropTypes.number,\n    right: PropTypes.number\n  })]),\n  tintColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  logoEnabled: PropTypes.bool,\n  logoPosition: PropTypes.oneOfType([PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number\n  }), PropTypes.shape({\n    top: PropTypes.number,\n    right: PropTypes.number\n  }), PropTypes.shape({\n    bottom: PropTypes.number,\n    left: PropTypes.number\n  }), PropTypes.shape({\n    bottom: PropTypes.number,\n    right: PropTypes.number\n  })]),\n  compassEnabled: PropTypes.bool,\n  compassViewPosition: PropTypes.number,\n  compassViewMargins: PropTypes.object,\n  surfaceView: PropTypes.bool,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  onRegionWillChange: PropTypes.func,\n  onRegionIsChanging: PropTypes.func,\n  onRegionDidChange: PropTypes.func,\n  onWillStartLoadingMap: PropTypes.func,\n  onDidFinishLoadingMap: PropTypes.func,\n  onDidFailLoadingMap: PropTypes.func,\n  onWillStartRenderingFrame: PropTypes.func,\n  onDidFinishRenderingFrame: PropTypes.func,\n  onDidFinishRenderingFrameFully: PropTypes.func,\n  onWillStartRenderingMap: PropTypes.func,\n  onDidFinishRenderingMap: PropTypes.func,\n  onDidFinishRenderingMapFully: PropTypes.func,\n  onUserLocationUpdate: PropTypes.func,\n  onDidFinishLoadingStyle: PropTypes.func,\n  regionWillChangeDebounceTime: PropTypes.number,\n  regionDidChangeDebounceTime: PropTypes.number\n});\nMapView.defaultProps = {\n  localizeLabels: false,\n  scrollEnabled: true,\n  pitchEnabled: true,\n  rotateEnabled: true,\n  attributionEnabled: true,\n  logoEnabled: true,\n  surfaceView: false,\n  regionWillChangeDebounceTime: 10,\n  regionDidChangeDebounceTime: 500\n};\nvar RCTMGLMapView = requireNativeComponent(NATIVE_MODULE_NAME, MapView, {\n  nativeOnly: {\n    onMapChange: true,\n    onAndroidCallback: true\n  }\n});\nvar RCTMGLAndroidTextureMapView;\n\nif (isAndroid()) {\n  RCTMGLAndroidTextureMapView = requireNativeComponent(ANDROID_TEXTURE_NATIVE_MODULE_NAME, MapView, {\n    nativeOnly: {\n      onMapChange: true,\n      onAndroidCallback: true\n    }\n  });\n}\n\nexport default MapView;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/MapView.js"],"names":["React","PropTypes","requireNativeComponent","debounce","makePoint","makeLatLngBounds","isFunction","isNumber","toJSONString","isAndroid","viewPropTypes","getFilter","Logger","NativeBridgeComponent","MapboxGL","NativeModules","MGLModule","console","error","NATIVE_MODULE_NAME","ANDROID_TEXTURE_NATIVE_MODULE_NAME","styles","StyleSheet","create","matchParent","flex","defaultStyleURL","StyleURL","Street","MapView","props","logger","sharedInstance","start","state","isReady","region","width","height","isUserInteraction","_onPress","bind","_onLongPress","_onChange","_onLayout","_onDebouncedRegionWillChange","_onRegionWillChange","regionWillChangeDebounceTime","_onDebouncedRegionDidChange","_onRegionDidChange","regionDidChangeDebounceTime","_setHandledMapChangedEvents","clear","stop","nextProps","events","onRegionWillChange","push","EventTypes","RegionWillChange","onRegionIsChanging","RegionIsChanging","onRegionDidChange","RegionDidChange","onUserLocationUpdate","UserLocationUpdated","onWillStartLoadingMap","WillStartLoadingMap","onDidFinishLoadingMap","DidFinishLoadingMap","onDidFailLoadingMap","DidFailLoadingMap","onWillStartRenderingFrame","WillStartRenderingFrame","onDidFinishRenderingFrame","DidFinishRenderingFrame","onDidFinishRenderingFrameFully","DidFinishRenderingFrameFully","onWillStartRenderingMap","WillStartRenderingMap","onDidFinishRenderingMap","DidFinishRenderingMap","onDidFinishRenderingMapFully","DidFinishRenderingMapFully","onDidFinishLoadingStyle","DidFinishLoadingStyle","_runNativeCommand","_nativeRef","coordinate","res","pointInView","point","coordinateFromView","visibleBounds","filter","layerIDs","length","Error","JSON","parse","data","bbox","warn","writeToDisk","uri","zoom","center","visible","sourceId","sourceLayerId","undefined","config","stopConfig","mode","CameraModes","Ease","pitch","heading","duration","centerCoordinate","bounds","ne","sw","paddingLeft","paddingRight","paddingTop","paddingBottom","boundsPaddingTop","boundsPaddingRight","boundsPaddingBottom","boundsPaddingLeft","e","onPress","nativeEvent","payload","onLongPress","setState","properties","type","propName","_handleOnChange","layout","visibleCoordinateBounds","contentInset","Array","isArray","nativeRef","setNativeProps","styleURL","styleJSON","_getContentInset","style","_setStyleURL","callbacks","ref","_setNativeRef","onMapChange","onAndroidCallback","_onAndroidCallback","mapView","surfaceView","children","testID","Component","propTypes","oneOfType","arrayOf","number","any","string","preferredFramesPerSecond","localizeLabels","bool","zoomEnabled","scrollEnabled","pitchEnabled","rotateEnabled","attributionEnabled","attributionPosition","shape","top","left","right","bottom","tintColor","array","logoEnabled","logoPosition","compassEnabled","compassViewPosition","compassViewMargins","object","func","defaultProps","RCTMGLMapView","nativeOnly","RCTMGLAndroidTextureMapView"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  StyleSheet,\n  NativeModules,\n  requireNativeComponent,\n} from 'react-native';\nimport {debounce} from 'debounce';\n\nimport {makePoint, makeLatLngBounds} from '../utils/geoUtils';\nimport {\n  isFunction,\n  isNumber,\n  toJSONString,\n  isAndroid,\n  viewPropTypes,\n} from '../utils';\nimport {getFilter} from '../utils/filterUtils';\nimport Logger from '../utils/Logger';\n\nimport NativeBridgeComponent from './NativeBridgeComponent';\n\nconst MapboxGL = NativeModules.MGLModule;\nif (MapboxGL == null) {\n  console.error(\n    'Native part of Mapbox React Native libraries were not registered properly, double check our native installation guides.',\n  );\n}\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLMapView';\n\nexport const ANDROID_TEXTURE_NATIVE_MODULE_NAME = 'RCTMGLAndroidTextureMapView';\n\nconst styles = StyleSheet.create({\n  matchParent: {flex: 1},\n});\n\nconst defaultStyleURL = MapboxGL.StyleURL.Street;\n\n/**\n * MapView backed by Mapbox Native GL\n */\nclass MapView extends NativeBridgeComponent(React.Component) {\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * The distance from the edges of the map view’s frame to the edges of the map view’s logical viewport.\n     */\n    contentInset: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.number),\n      PropTypes.number,\n    ]),\n\n    /**\n     * Style for wrapping React Native View\n     */\n    style: PropTypes.any,\n\n    /**\n     * Style URL for map - notice, if non is set it _will_ default to `MapboxGL.StyleURL.Street`\n     */\n    styleURL: PropTypes.string,\n\n    /**\n     * StyleJSON for map - according to TileJSON specs: https://github.com/mapbox/tilejson-spec\n     */\n    styleJSON: PropTypes.string,\n\n    /**\n     * iOS: The preferred frame rate at which the map view is rendered.\n     * The default value for this property is MGLMapViewPreferredFramesPerSecondDefault,\n     * which will adaptively set the preferred frame rate based on the capability of\n     * the user’s device to maintain a smooth experience. This property can be set to arbitrary integer values.\n     *\n     * Android: The maximum frame rate at which the map view is rendered, but it can't excess the ability of device hardware.\n     * This property can be set to arbitrary integer values.\n     */\n    preferredFramesPerSecond: PropTypes.number,\n\n    /**\n     * Automatically change the language of the map labels to the system’s preferred language,\n     * this is not something that can be toggled on/off\n     */\n    localizeLabels: PropTypes.bool,\n\n    /**\n     * Enable/Disable zoom on the map\n     */\n    zoomEnabled: PropTypes.bool,\n\n    /**\n     * Enable/Disable scroll on the map\n     */\n    scrollEnabled: PropTypes.bool,\n\n    /**\n     * Enable/Disable pitch on map\n     */\n    pitchEnabled: PropTypes.bool,\n\n    /**\n     * Enable/Disable rotation on map\n     */\n    rotateEnabled: PropTypes.bool,\n\n    /**\n     * The Mapbox terms of service, which governs the use of Mapbox-hosted vector tiles and styles,\n     * [requires](https://www.mapbox.com/help/how-attribution-works/) these copyright notices to accompany any map that features Mapbox-designed styles, OpenStreetMap data, or other Mapbox data such as satellite or terrain data.\n     * If that applies to this map view, do not hide this view or remove any notices from it.\n     *\n     * You are additionally [required](https://www.mapbox.com/help/how-mobile-apps-work/#telemetry) to provide users with the option to disable anonymous usage and location sharing (telemetry).\n     * If this view is hidden, you must implement this setting elsewhere in your app. See our website for [Android](https://www.mapbox.com/android-docs/map-sdk/overview/#telemetry-opt-out) and [iOS](https://www.mapbox.com/ios-sdk/#telemetry_opt_out) for implementation details.\n     *\n     * Enable/Disable attribution on map. For iOS you need to add MGLMapboxMetricsEnabledSettingShownInApp=YES\n     * to your Info.plist\n     */\n    attributionEnabled: PropTypes.bool,\n\n    /**\n     * Adds attribution offset, e.g. `{top: 8, left: 8}` will put attribution button in top-left corner of the map\n     */\n    attributionPosition: PropTypes.oneOfType([\n      PropTypes.shape({top: PropTypes.number, left: PropTypes.number}),\n      PropTypes.shape({top: PropTypes.number, right: PropTypes.number}),\n      PropTypes.shape({bottom: PropTypes.number, left: PropTypes.number}),\n      PropTypes.shape({bottom: PropTypes.number, right: PropTypes.number}),\n    ]),\n\n    /**\n     * MapView's tintColor - ios only\n     * @platform ios\n     */\n    tintColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n\n    /**\n     * Enable/Disable the logo on the map.\n     */\n    logoEnabled: PropTypes.bool,\n\n    /**\n     * Adds logo offset, e.g. `{top: 8, left: 8}` will put the logo in top-left corner of the map\n     */\n    logoPosition: PropTypes.oneOfType([\n      PropTypes.shape({top: PropTypes.number, left: PropTypes.number}),\n      PropTypes.shape({top: PropTypes.number, right: PropTypes.number}),\n      PropTypes.shape({bottom: PropTypes.number, left: PropTypes.number}),\n      PropTypes.shape({bottom: PropTypes.number, right: PropTypes.number}),\n    ]),\n\n    /**\n     * Enable/Disable the compass from appearing on the map\n     */\n    compassEnabled: PropTypes.bool,\n\n    /**\n     * Change corner of map the compass starts at. 0: TopLeft, 1: TopRight, 2: BottomLeft, 3: BottomRight\n     */\n    compassViewPosition: PropTypes.number,\n\n    /**\n     * Add margins to the compass with x and y values\n     */\n    compassViewMargins: PropTypes.object,\n\n    /**\n     * [Android only] Enable/Disable use of GLSurfaceView insted of TextureView.\n     */\n    surfaceView: PropTypes.bool,\n\n    /**\n     * Map press listener, gets called when a user presses the map\n     */\n    onPress: PropTypes.func,\n\n    /**\n     * Map long press listener, gets called when a user long presses the map\n     */\n    onLongPress: PropTypes.func,\n\n    /**\n     * This event is triggered whenever the currently displayed map region is about to change.\n     *\n     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n     */\n    onRegionWillChange: PropTypes.func,\n\n    /**\n     * This event is triggered whenever the currently displayed map region is changing.\n     *\n     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n     */\n    onRegionIsChanging: PropTypes.func,\n\n    /**\n     * This event is triggered whenever the currently displayed map region finished changing\n     *\n     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n     */\n    onRegionDidChange: PropTypes.func,\n\n    /**\n     * This event is triggered when the map is about to start loading a new map style.\n     */\n    onWillStartLoadingMap: PropTypes.func,\n\n    /**\n     * This is triggered when the map has successfully loaded a new map style.\n     */\n    onDidFinishLoadingMap: PropTypes.func,\n\n    /**\n     * This event is triggered when the map has failed to load a new map style.\n     */\n    onDidFailLoadingMap: PropTypes.func,\n\n    /**\n     * This event is triggered when the map will start rendering a frame.\n     */\n    onWillStartRenderingFrame: PropTypes.func,\n\n    /**\n     * This event is triggered when the map finished rendering a frame.\n     */\n    onDidFinishRenderingFrame: PropTypes.func,\n\n    /**\n     * This event is triggered when the map fully finished rendering a frame.\n     */\n    onDidFinishRenderingFrameFully: PropTypes.func,\n\n    /**\n     * This event is triggered when the map will start rendering the map.\n     */\n    onWillStartRenderingMap: PropTypes.func,\n\n    /**\n     * This event is triggered when the map finished rendering the map.\n     */\n    onDidFinishRenderingMap: PropTypes.func,\n\n    /**\n     * This event is triggered when the map fully finished rendering the map.\n     */\n    onDidFinishRenderingMapFully: PropTypes.func,\n\n    /**\n     * This event is triggered when the user location is updated.\n     */\n    onUserLocationUpdate: PropTypes.func,\n\n    /**\n     * This event is triggered when a style has finished loading.\n     */\n    onDidFinishLoadingStyle: PropTypes.func,\n\n    /**\n     * The emitted frequency of regionwillchange events\n     */\n    regionWillChangeDebounceTime: PropTypes.number,\n\n    /**\n     * The emitted frequency of regiondidchange events\n     */\n    regionDidChangeDebounceTime: PropTypes.number,\n  };\n\n  static defaultProps = {\n    localizeLabels: false,\n    scrollEnabled: true,\n    pitchEnabled: true,\n    rotateEnabled: true,\n    attributionEnabled: true,\n    logoEnabled: true,\n    surfaceView: false,\n    regionWillChangeDebounceTime: 10,\n    regionDidChangeDebounceTime: 500,\n  };\n\n  constructor(props) {\n    super(props, NATIVE_MODULE_NAME);\n\n    this.logger = Logger.sharedInstance();\n    this.logger.start();\n\n    this.state = {\n      isReady: null,\n      region: null,\n      width: 0,\n      height: 0,\n      isUserInteraction: false,\n    };\n\n    this._onPress = this._onPress.bind(this);\n    this._onLongPress = this._onLongPress.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n\n    // debounced map change methods\n    this._onDebouncedRegionWillChange = debounce(\n      this._onRegionWillChange.bind(this),\n      props.regionWillChangeDebounceTime,\n      true,\n    );\n\n    this._onDebouncedRegionDidChange = debounce(\n      this._onRegionDidChange.bind(this),\n      props.regionDidChangeDebounceTime,\n    );\n  }\n\n  componentDidMount() {\n    this._setHandledMapChangedEvents(this.props);\n  }\n\n  componentWillUnmount() {\n    this._onDebouncedRegionWillChange.clear();\n    this._onDebouncedRegionDidChange.clear();\n    this.logger.stop();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this._setHandledMapChangedEvents(nextProps);\n  }\n\n  _setHandledMapChangedEvents(props) {\n    if (isAndroid()) {\n      const events = [];\n\n      if (props.onRegionWillChange) {\n        events.push(MapboxGL.EventTypes.RegionWillChange);\n      }\n      if (props.onRegionIsChanging) {\n        events.push(MapboxGL.EventTypes.RegionIsChanging);\n      }\n      if (props.onRegionDidChange) {\n        events.push(MapboxGL.EventTypes.RegionDidChange);\n      }\n      if (props.onUserLocationUpdate) {\n        events.push(MapboxGL.EventTypes.UserLocationUpdated);\n      }\n      if (props.onWillStartLoadingMap) {\n        events.push(MapboxGL.EventTypes.WillStartLoadingMap);\n      }\n      if (props.onDidFinishLoadingMap) {\n        events.push(MapboxGL.EventTypes.DidFinishLoadingMap);\n      }\n      if (props.onDidFailLoadingMap) {\n        events.push(MapboxGL.EventTypes.DidFailLoadingMap);\n      }\n      if (props.onWillStartRenderingFrame) {\n        events.push(MapboxGL.EventTypes.WillStartRenderingFrame);\n      }\n      if (props.onDidFinishRenderingFrame) {\n        events.push(MapboxGL.EventTypes.DidFinishRenderingFrame);\n      }\n      if (props.onDidFinishRenderingFrameFully) {\n        events.push(MapboxGL.EventTypes.DidFinishRenderingFrameFully);\n      }\n      if (props.onWillStartRenderingMap) {\n        events.push(MapboxGL.EventTypes.WillStartRenderingMap);\n      }\n      if (props.onDidFinishRenderingMap) {\n        events.push(MapboxGL.EventTypes.DidFinishRenderingMap);\n      }\n      if (props.onDidFinishRenderingMapFully) {\n        events.push(MapboxGL.EventTypes.DidFinishRenderingMapFully);\n      }\n      if (props.onDidFinishLoadingStyle) {\n        events.push(MapboxGL.EventTypes.DidFinishLoadingStyle);\n      }\n\n      this._runNativeCommand(\n        'setHandledMapChangedEvents',\n        this._nativeRef,\n        events,\n      );\n    }\n  }\n\n  /**\n   * Converts a geographic coordinate to a point in the given view’s coordinate system.\n   *\n   * @example\n   * const pointInView = await this._map.getPointInView([-37.817070, 144.949901]);\n   *\n   * @param {Array<Number>} coordinate - A point expressed in the map view's coordinate system.\n   * @return {Array}\n   */\n  async getPointInView(coordinate) {\n    const res = await this._runNativeCommand(\n      'getPointInView',\n      this._nativeRef,\n      [coordinate],\n    );\n    return res.pointInView;\n  }\n\n  /**\n   * Converts a point in the given view’s coordinate system to a geographic coordinate.\n   *\n   * @example\n   * const coordinate = await this._map.getCoordinateFromView([100, 100]);\n   *\n   * @param {Array<Number>} point - A point expressed in the given view’s coordinate system.\n   * @return {Array}\n   */\n  async getCoordinateFromView(point) {\n    const res = await this._runNativeCommand(\n      'getCoordinateFromView',\n      this._nativeRef,\n      [point],\n    );\n    return res.coordinateFromView;\n  }\n\n  /**\n   * The coordinate bounds(ne, sw) visible in the users’s viewport.\n   *\n   * @example\n   * const visibleBounds = await this._map.getVisibleBounds();\n   *\n   * @return {Array}\n   */\n  async getVisibleBounds() {\n    const res = await this._runNativeCommand(\n      'getVisibleBounds',\n      this._nativeRef,\n    );\n    return res.visibleBounds;\n  }\n\n  /**\n   * Returns an array of rendered map features that intersect with a given point.\n   *\n   * @example\n   * this._map.queryRenderedFeaturesAtPoint([30, 40], ['==', 'type', 'Point'], ['id1', 'id2'])\n   *\n   * @param  {Array<Number>} coordinate - A point expressed in the map view’s coordinate system.\n   * @param  {Array=} filter - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.\n   * @param  {Array=} layerIDs - A array of layer id's to filter the features by\n   * @return {FeatureCollection}\n   */\n  async queryRenderedFeaturesAtPoint(coordinate, filter = [], layerIDs = []) {\n    if (!coordinate || coordinate.length < 2) {\n      throw new Error('Must pass in valid coordinate[lng, lat]');\n    }\n\n    const res = await this._runNativeCommand(\n      'queryRenderedFeaturesAtPoint',\n      this._nativeRef,\n      [coordinate, getFilter(filter), layerIDs],\n    );\n\n    if (isAndroid()) {\n      return JSON.parse(res.data);\n    }\n\n    return res.data;\n  }\n\n  /**\n   * Returns an array of rendered map features that intersect with the given rectangle,\n   * restricted to the given style layers and filtered by the given predicate.\n   *\n   * @example\n   * this._map.queryRenderedFeaturesInRect([30, 40, 20, 10], ['==', 'type', 'Point'], ['id1', 'id2'])\n   *\n   * @param  {Array<Number>} bbox - A rectangle expressed in the map view’s coordinate system.\n   * @param  {Array=} filter - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.\n   * @param  {Array=} layerIDs -  A array of layer id's to filter the features by\n   * @return {FeatureCollection}\n   */\n  async queryRenderedFeaturesInRect(bbox, filter = [], layerIDs = []) {\n    if (!bbox || bbox.length !== 4) {\n      throw new Error(\n        'Must pass in a valid bounding box[top, right, bottom, left]',\n      );\n    }\n    const res = await this._runNativeCommand(\n      'queryRenderedFeaturesInRect',\n      this._nativeRef,\n      [bbox, getFilter(filter), layerIDs],\n    );\n\n    if (isAndroid()) {\n      return JSON.parse(res.data);\n    }\n\n    return res.data;\n  }\n\n  /**\n   * Map camera will perform updates based on provided config. Deprecated use Camera#setCamera.\n   */\n  setCamera() {\n    console.warn(\n      'MapView.setCamera is deprecated - please use Camera#setCamera',\n    );\n  }\n\n  /**\n   * Takes snapshot of map with current tiles and returns a URI to the image\n   * @param  {Boolean} writeToDisk If true will create a temp file, otherwise it is in base64\n   * @return {String}\n   */\n  async takeSnap(writeToDisk = false) {\n    const res = await this._runNativeCommand('takeSnap', this._nativeRef, [\n      writeToDisk,\n    ]);\n    return res.uri;\n  }\n\n  /**\n   * Returns the current zoom of the map view.\n   *\n   * @example\n   * const zoom = await this._map.getZoom();\n   *\n   * @return {Number}\n   */\n\n  async getZoom() {\n    const res = await this._runNativeCommand('getZoom', this._nativeRef);\n    return res.zoom;\n  }\n\n  /**\n   * Returns the map's geographical centerpoint\n   *\n   * @example\n   * const center = await this._map.getCenter();\n   *\n   * @return {Array<Number>} Coordinates\n   */\n  async getCenter() {\n    const res = await this._runNativeCommand('getCenter', this._nativeRef);\n    return res.center;\n  }\n\n  /**\n   * Sets the visibility of all the layers referencing the specified `sourceLayerId` and/or `sourceId`\n   *\n   * @example\n   * await this._map.setSourceVisibility(false, 'composite', 'building')\n   *\n   * @param {boolean} visible - Visibility of the layers\n   * @param {String} sourceId - Identifier of the target source (e.g. 'composite')\n   * @param {String=} sourceLayerId - Identifier of the target source-layer (e.g. 'building')\n   */\n  setSourceVisibility(visible, sourceId, sourceLayerId = undefined) {\n    this._runNativeCommand('setSourceVisibility', this._nativeRef, [\n      visible,\n      sourceId,\n      sourceLayerId,\n    ]);\n  }\n\n  /**\n   * Show the attribution and telemetry action sheet.\n   * If you implement a custom attribution button, you should add this action to the button.\n   */\n  showAttribution() {\n    return this._runNativeCommand('showAttribution', this._nativeRef);\n  }\n\n  _createStopConfig(config = {}) {\n    const stopConfig = {\n      mode: isNumber(config.mode) ? config.mode : MapboxGL.CameraModes.Ease,\n      pitch: config.pitch,\n      heading: config.heading,\n      duration: config.duration || 2000,\n      zoom: config.zoom,\n    };\n\n    if (config.centerCoordinate) {\n      stopConfig.centerCoordinate = toJSONString(\n        makePoint(config.centerCoordinate),\n      );\n    }\n\n    if (config.bounds && config.bounds.ne && config.bounds.sw) {\n      const {ne, sw, paddingLeft, paddingRight, paddingTop, paddingBottom} =\n        config.bounds;\n      stopConfig.bounds = toJSONString(makeLatLngBounds(ne, sw));\n      stopConfig.boundsPaddingTop = paddingTop || 0;\n      stopConfig.boundsPaddingRight = paddingRight || 0;\n      stopConfig.boundsPaddingBottom = paddingBottom || 0;\n      stopConfig.boundsPaddingLeft = paddingLeft || 0;\n    }\n\n    return stopConfig;\n  }\n\n  _onPress(e) {\n    if (isFunction(this.props.onPress)) {\n      this.props.onPress(e.nativeEvent.payload);\n    }\n  }\n\n  _onLongPress(e) {\n    if (isFunction(this.props.onLongPress)) {\n      this.props.onLongPress(e.nativeEvent.payload);\n    }\n  }\n\n  _onRegionWillChange(payload) {\n    if (isFunction(this.props.onRegionWillChange)) {\n      this.props.onRegionWillChange(payload);\n    }\n    this.setState({isUserInteraction: payload.properties.isUserInteraction});\n  }\n\n  _onRegionDidChange(payload) {\n    if (isFunction(this.props.onRegionDidChange)) {\n      this.props.onRegionDidChange(payload);\n    }\n    this.setState({region: payload});\n  }\n\n  _onChange(e) {\n    const {regionWillChangeDebounceTime, regionDidChangeDebounceTime} =\n      this.props;\n    const {type, payload} = e.nativeEvent;\n    let propName = '';\n\n    switch (type) {\n      case MapboxGL.EventTypes.RegionWillChange:\n        if (regionWillChangeDebounceTime > 0) {\n          this._onDebouncedRegionWillChange(payload);\n        } else {\n          propName = 'onRegionWillChange';\n        }\n        break;\n      case MapboxGL.EventTypes.RegionIsChanging:\n        propName = 'onRegionIsChanging';\n        break;\n      case MapboxGL.EventTypes.RegionDidChange:\n        if (regionDidChangeDebounceTime > 0) {\n          this._onDebouncedRegionDidChange(payload);\n        } else {\n          propName = 'onRegionDidChange';\n        }\n        break;\n      case MapboxGL.EventTypes.UserLocationUpdated:\n        propName = 'onUserLocationUpdate';\n        break;\n      case MapboxGL.EventTypes.WillStartLoadingMap:\n        propName = 'onWillStartLoadingMap';\n        break;\n      case MapboxGL.EventTypes.DidFinishLoadingMap:\n        propName = 'onDidFinishLoadingMap';\n        break;\n      case MapboxGL.EventTypes.DidFailLoadingMap:\n        propName = 'onDidFailLoadingMap';\n        break;\n      case MapboxGL.EventTypes.WillStartRenderingFrame:\n        propName = 'onWillStartRenderingFrame';\n        break;\n      case MapboxGL.EventTypes.DidFinishRenderingFrame:\n        propName = 'onDidFinishRenderingFrame';\n        break;\n      case MapboxGL.EventTypes.DidFinishRenderingFrameFully:\n        propName = 'onDidFinishRenderingFrameFully';\n        break;\n      case MapboxGL.EventTypes.WillStartRenderingMap:\n        propName = 'onWillStartRenderingMap';\n        break;\n      case MapboxGL.EventTypes.DidFinishRenderingMap:\n        propName = 'onDidFinishRenderingMap';\n        break;\n      case MapboxGL.EventTypes.DidFinishRenderingMapFully:\n        propName = 'onDidFinishRenderingMapFully';\n        break;\n      case MapboxGL.EventTypes.DidFinishLoadingStyle:\n        propName = 'onDidFinishLoadingStyle';\n        break;\n      default:\n        console.warn('Unhandled event callback type', type);\n    }\n\n    if (propName.length) {\n      this._handleOnChange(propName, payload);\n    }\n  }\n\n  _onLayout(e) {\n    this.setState({\n      isReady: true,\n      width: e.nativeEvent.layout.width,\n      height: e.nativeEvent.layout.height,\n    });\n  }\n\n  _handleOnChange(propName, payload) {\n    if (isFunction(this.props[propName])) {\n      this.props[propName](payload);\n    }\n  }\n\n  _getCenterCoordinate() {\n    if (!this.props.centerCoordinate) {\n      return;\n    }\n    return toJSONString(makePoint(this.props.centerCoordinate));\n  }\n\n  _getVisibleCoordinateBounds() {\n    if (!this.props.visibleCoordinateBounds) {\n      return;\n    }\n    return toJSONString(\n      makeLatLngBounds(\n        this.props.visibleCoordinateBounds[0],\n        this.props.visibleCoordinateBounds[1],\n      ),\n    );\n  }\n\n  _getContentInset() {\n    if (!this.props.contentInset) {\n      return;\n    }\n\n    if (!Array.isArray(this.props.contentInset)) {\n      return [this.props.contentInset];\n    }\n\n    return this.props.contentInset;\n  }\n\n  _setNativeRef(nativeRef) {\n    this._nativeRef = nativeRef;\n    super._runPendingNativeCommands(nativeRef);\n  }\n\n  setNativeProps(props) {\n    if (this._nativeRef) {\n      this._nativeRef.setNativeProps(props);\n    }\n  }\n\n  _setStyleURL(props) {\n    // user set a styleURL, no need to alter props\n    if (props.styleURL) {\n      return;\n    }\n\n    // user set styleJSON pass it to styleURL\n    if (props.styleJSON && !props.styleURL) {\n      props.styleURL = props.styleJSON;\n    }\n\n    // user neither set styleJSON nor styleURL\n    // set defaultStyleUrl\n    if (!props.styleJSON || !props.styleURL) {\n      props.styleURL = defaultStyleURL;\n    }\n  }\n\n  render() {\n    const props = {\n      ...this.props,\n      contentInset: this._getContentInset(),\n      style: styles.matchParent,\n    };\n\n    this._setStyleURL(props);\n\n    const callbacks = {\n      ref: (nativeRef) => this._setNativeRef(nativeRef),\n      onPress: this._onPress,\n      onLongPress: this._onLongPress,\n      onMapChange: this._onChange,\n      onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined,\n    };\n\n    let mapView = null;\n    if (isAndroid() && !this.props.surfaceView && this.state.isReady) {\n      mapView = (\n        <RCTMGLAndroidTextureMapView {...props} {...callbacks}>\n          {this.props.children}\n        </RCTMGLAndroidTextureMapView>\n      );\n    } else if (this.state.isReady) {\n      mapView = (\n        <RCTMGLMapView {...props} {...callbacks}>\n          {this.props.children}\n        </RCTMGLMapView>\n      );\n    }\n\n    return (\n      <View\n        onLayout={this._onLayout}\n        style={this.props.style}\n        testID={mapView ? null : this.props.testID}\n      >\n        {mapView}\n      </View>\n    );\n  }\n}\n\nconst RCTMGLMapView = requireNativeComponent(NATIVE_MODULE_NAME, MapView, {\n  nativeOnly: {onMapChange: true, onAndroidCallback: true},\n});\n\nlet RCTMGLAndroidTextureMapView;\nif (isAndroid()) {\n  RCTMGLAndroidTextureMapView = requireNativeComponent(\n    ANDROID_TEXTURE_NATIVE_MODULE_NAME,\n    MapView,\n    {\n      nativeOnly: {onMapChange: true, onAndroidCallback: true},\n    },\n  );\n}\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"module"}