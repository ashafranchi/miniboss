{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport SnapshotOptions from \"./SnapshotOptions\";\nvar MapboxGLSnapshotManger = NativeModules.MGLSnapshotModule;\n\nvar SnapshotManager = function () {\n  function SnapshotManager() {\n    _classCallCheck(this, SnapshotManager);\n  }\n\n  _createClass(SnapshotManager, [{\n    key: \"takeSnap\",\n    value: function takeSnap() {\n      var options,\n          snapshotOptions,\n          uri,\n          _args = arguments;\n      return _regeneratorRuntime.async(function takeSnap$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              snapshotOptions = new SnapshotOptions(options);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(MapboxGLSnapshotManger.takeSnap(snapshotOptions));\n\n            case 4:\n              uri = _context.sent;\n              return _context.abrupt(\"return\", uri);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return SnapshotManager;\n}();\n\nvar snapshotManager = new SnapshotManager();\nexport default snapshotManager;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/modules/snapshot/snapshotManager.js"],"names":["SnapshotOptions","MapboxGLSnapshotManger","NativeModules","MGLSnapshotModule","SnapshotManager","options","snapshotOptions","takeSnap","uri","snapshotManager"],"mappings":";;;;AAEA,OAAOA,eAAP;AAEA,IAAMC,sBAAsB,GAAGC,aAAa,CAACC,iBAA7C;;IAOMC,e;;;;;;;WAyCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,cAAAA,OAAf,2DAAyB,EAAzB;AACQC,cAAAA,eADR,GAC0B,IAAIN,eAAJ,CAAoBK,OAApB,CAD1B;AAAA;AAAA,+CAGoBJ,sBAAsB,CAACM,QAAvB,CAAgCD,eAAhC,CAHpB;;AAAA;AAGQE,cAAAA,GAHR;AAAA,+CAISA,GAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAQF,IAAMC,eAAe,GAAG,IAAIL,eAAJ,EAAxB;AACA,eAAeK,eAAf","sourcesContent":["import {NativeModules} from 'react-native';\n\nimport SnapshotOptions from './SnapshotOptions';\n\nconst MapboxGLSnapshotManger = NativeModules.MGLSnapshotModule;\n\n/**\n * The snapshotManager generates static raster images of the map.\n * Each snapshot image depicts a portion of a map defined by an SnapshotOptions object you provide.\n * The snapshotter generates the snapshot asynchronous.\n */\nclass SnapshotManager {\n  /**\n   * Takes a snapshot of the base map using the provided Snapshot options. NOTE pitch, heading, zoomLevel only works when centerCoordinate is set!\n   *\n   * @example\n   *\n   * // creates a temp file png of base map\n   * const uri = await MapboxGL.snapshotManager.takeSnap({\n   *   centerCoordinate: [-74.126410, 40.797968],\n   *   width: width,\n   *   height: height,\n   *   zoomLevel: 12,\n   *   pitch: 30,\n   *   heading: 20,\n   *   styleURL: MapboxGL.StyleURL.Dark,\n   *   writeToDisk: true, // Create a temporary file\n   * });\n   *\n   * // creates base64 png of base map without logo\n   * const uri = await MapboxGL.snapshotManager.takeSnap({\n   *   centerCoordinate: [-74.126410, 40.797968],\n   *   width: width,\n   *   height: height,\n   *   zoomLevel: 12,\n   *   pitch: 30,\n   *   heading: 20,\n   *   styleURL: MapboxGL.StyleURL.Dark,\n   *   withLogo: false, // Disable Mapbox logo (Android only)\n   * });\n   *\n   * // creates snapshot with bounds\n   * const uri = await MapboxGL.snapshotManager.takeSnap({\n   *   bounds: [[-74.126410, 40.797968], [-74.143727, 40.772177]],\n   *   width: width,\n   *   height: height,\n   *   styleURL: MapboxGL.StyleURL.Dark,\n   * });\n   *\n   * @param  {SnapshotOptions}  options Snapshot options for create a static image of the base map\n   * @return {Promise}\n   */\n  async takeSnap(options = {}) {\n    const snapshotOptions = new SnapshotOptions(options);\n\n    const uri = await MapboxGLSnapshotManger.takeSnap(snapshotOptions);\n    return uri;\n  }\n}\n\nconst snapshotManager = new SnapshotManager();\nexport default snapshotManager;\n"]},"metadata":{},"sourceType":"module"}