{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport RNAnimated from \"react-native-web/dist/exports/Animated\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport { isAndroid } from \"./utils\";\nimport MapView from \"./components/MapView\";\nimport Light from \"./components/Light\";\nimport PointAnnotation from \"./components/PointAnnotation\";\nimport Annotation from \"./components/annotations/Annotation\";\nimport Callout from \"./components/Callout\";\nimport UserLocation from \"./components/UserLocation\";\nimport Camera from \"./components/Camera\";\nimport VectorSource from \"./components/VectorSource\";\nimport ShapeSource from \"./components/ShapeSource\";\nimport RasterSource from \"./components/RasterSource\";\nimport ImageSource from \"./components/ImageSource\";\nimport Images from \"./components/Images\";\nimport FillLayer from \"./components/FillLayer\";\nimport FillExtrusionLayer from \"./components/FillExtrusionLayer\";\nimport HeatmapLayer from \"./components/HeatmapLayer\";\nimport LineLayer from \"./components/LineLayer\";\nimport CircleLayer from \"./components/CircleLayer\";\nimport SymbolLayer from \"./components/SymbolLayer\";\nimport RasterLayer from \"./components/RasterLayer\";\nimport BackgroundLayer from \"./components/BackgroundLayer\";\nimport locationManager from \"./modules/location/locationManager\";\nimport offlineManager from \"./modules/offline/offlineManager\";\nimport snapshotManager from \"./modules/snapshot/snapshotManager\";\nimport MarkerView from \"./components/MarkerView\";\nimport Animated from \"./utils/animated/Animated\";\nimport AnimatedMapPoint from \"./utils/animated/AnimatedPoint\";\nimport AnimatedShape from \"./utils/animated/AnimatedShape\";\nimport AnimatedCoordinatesArray from \"./utils/animated/AnimatedCoordinatesArray\";\nimport AnimatedExtractCoordinateFromArray from \"./utils/animated/AnimatedExtractCoordinateFromArray\";\nimport AnimatedRouteCoordinatesArray from \"./utils/animated/AnimatedRouteCoordinatesArray\";\nimport Style from \"./components/Style\";\nimport Logger from \"./utils/Logger\";\n\nvar MapboxGL = _objectSpread({}, NativeModules.MGLModule);\n\nMapboxGL.requestAndroidLocationPermissions = function _callee() {\n  var res, permissions, _i, _permissions, permission;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!isAndroid()) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(PermissionsAndroid.requestMultiple([PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION, PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION]));\n\n        case 3:\n          res = _context.sent;\n\n          if (res) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\", false);\n\n        case 6:\n          permissions = Object.keys(res);\n          _i = 0, _permissions = permissions;\n\n        case 8:\n          if (!(_i < _permissions.length)) {\n            _context.next = 15;\n            break;\n          }\n\n          permission = _permissions[_i];\n\n          if (!(res[permission] === PermissionsAndroid.RESULTS.GRANTED)) {\n            _context.next = 12;\n            break;\n          }\n\n          return _context.abrupt(\"return\", true);\n\n        case 12:\n          _i++;\n          _context.next = 8;\n          break;\n\n        case 15:\n          return _context.abrupt(\"return\", false);\n\n        case 16:\n          throw new Error('You should only call this method on Android!');\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nMapboxGL.UserTrackingModes = Camera.UserTrackingModes;\nMapboxGL.MapView = MapView;\nMapboxGL.Light = Light;\nMapboxGL.PointAnnotation = PointAnnotation;\nMapboxGL.Callout = Callout;\nMapboxGL.UserLocation = UserLocation;\nMapboxGL.Camera = Camera;\nMapboxGL.Style = Style;\nMapboxGL.Annotation = Annotation;\nMapboxGL.MarkerView = MarkerView;\nMapboxGL.VectorSource = VectorSource;\nMapboxGL.ShapeSource = ShapeSource;\nMapboxGL.RasterSource = RasterSource;\nMapboxGL.ImageSource = ImageSource;\nMapboxGL.Images = Images;\nMapboxGL.FillLayer = FillLayer;\nMapboxGL.FillExtrusionLayer = FillExtrusionLayer;\nMapboxGL.HeatmapLayer = HeatmapLayer;\nMapboxGL.LineLayer = LineLayer;\nMapboxGL.CircleLayer = CircleLayer;\nMapboxGL.SymbolLayer = SymbolLayer;\nMapboxGL.RasterLayer = RasterLayer;\nMapboxGL.BackgroundLayer = BackgroundLayer;\nMapboxGL.locationManager = locationManager;\nMapboxGL.offlineManager = offlineManager;\nMapboxGL.snapshotManager = snapshotManager;\nMapboxGL.Animated = Animated;\nMapboxGL.AnimatedPoint = AnimatedMapPoint;\nMapboxGL.AnimatedCoordinatesArray = AnimatedCoordinatesArray;\nMapboxGL.AnimatedExtractCoordinateFromArray = AnimatedExtractCoordinateFromArray;\nMapboxGL.AnimatedRouteCoordinatesArray = AnimatedRouteCoordinatesArray;\nMapboxGL.AnimatedShape = AnimatedShape;\nMapboxGL.Logger = Logger;\nvar LineJoin = MapboxGL.LineJoin;\nexport { MapView, Light, PointAnnotation, Callout, UserLocation, Camera, Annotation, MarkerView, VectorSource, ShapeSource, RasterSource, ImageSource, Images, FillLayer, FillExtrusionLayer, HeatmapLayer, LineLayer, CircleLayer, SymbolLayer, RasterLayer, BackgroundLayer, locationManager, offlineManager, snapshotManager, AnimatedMapPoint, AnimatedCoordinatesArray, AnimatedShape, Animated, LineJoin, Logger, Style };\nexport default MapboxGL;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/index.js"],"names":["isAndroid","MapView","Light","PointAnnotation","Annotation","Callout","UserLocation","Camera","VectorSource","ShapeSource","RasterSource","ImageSource","Images","FillLayer","FillExtrusionLayer","HeatmapLayer","LineLayer","CircleLayer","SymbolLayer","RasterLayer","BackgroundLayer","locationManager","offlineManager","snapshotManager","MarkerView","Animated","AnimatedMapPoint","AnimatedShape","AnimatedCoordinatesArray","AnimatedExtractCoordinateFromArray","AnimatedRouteCoordinatesArray","Style","Logger","MapboxGL","NativeModules","MGLModule","requestAndroidLocationPermissions","PermissionsAndroid","requestMultiple","PERMISSIONS","ACCESS_FINE_LOCATION","ACCESS_COARSE_LOCATION","res","permissions","Object","keys","permission","RESULTS","GRANTED","Error","UserTrackingModes","AnimatedPoint","LineJoin"],"mappings":"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","sourcesContent":["import {\n  Animated as RNAnimated,\n  NativeModules,\n  PermissionsAndroid,\n} from 'react-native';\n\nimport {isAndroid} from './utils';\nimport MapView from './components/MapView';\nimport Light from './components/Light';\nimport PointAnnotation from './components/PointAnnotation';\nimport Annotation from './components/annotations/Annotation'; // eslint-disable-line import/no-cycle\nimport Callout from './components/Callout';\nimport UserLocation from './components/UserLocation'; // eslint-disable-line import/no-cycle\nimport Camera from './components/Camera';\nimport VectorSource from './components/VectorSource';\nimport ShapeSource from './components/ShapeSource';\nimport RasterSource from './components/RasterSource';\nimport ImageSource from './components/ImageSource';\nimport Images from './components/Images';\nimport FillLayer from './components/FillLayer';\nimport FillExtrusionLayer from './components/FillExtrusionLayer';\nimport HeatmapLayer from './components/HeatmapLayer';\nimport LineLayer from './components/LineLayer';\nimport CircleLayer from './components/CircleLayer';\nimport SymbolLayer from './components/SymbolLayer';\nimport RasterLayer from './components/RasterLayer';\nimport BackgroundLayer from './components/BackgroundLayer';\nimport locationManager from './modules/location/locationManager';\nimport offlineManager from './modules/offline/offlineManager';\nimport snapshotManager from './modules/snapshot/snapshotManager';\nimport MarkerView from './components/MarkerView';\nimport Animated from './utils/animated/Animated';\nimport AnimatedMapPoint from './utils/animated/AnimatedPoint';\nimport AnimatedShape from './utils/animated/AnimatedShape';\nimport AnimatedCoordinatesArray from './utils/animated/AnimatedCoordinatesArray';\nimport AnimatedExtractCoordinateFromArray from './utils/animated/AnimatedExtractCoordinateFromArray';\nimport AnimatedRouteCoordinatesArray from './utils/animated/AnimatedRouteCoordinatesArray';\nimport Style from './components/Style';\nimport Logger from './utils/Logger';\n\nconst MapboxGL = {...NativeModules.MGLModule};\n\n// static methods\nMapboxGL.requestAndroidLocationPermissions = async function () {\n  if (isAndroid()) {\n    const res = await PermissionsAndroid.requestMultiple([\n      PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n      PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION,\n    ]);\n\n    if (!res) {\n      return false;\n    }\n\n    const permissions = Object.keys(res);\n    for (const permission of permissions) {\n      if (res[permission] === PermissionsAndroid.RESULTS.GRANTED) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  throw new Error('You should only call this method on Android!');\n};\n\nMapboxGL.UserTrackingModes = Camera.UserTrackingModes;\n\n// components\nMapboxGL.MapView = MapView;\nMapboxGL.Light = Light;\nMapboxGL.PointAnnotation = PointAnnotation;\nMapboxGL.Callout = Callout;\nMapboxGL.UserLocation = UserLocation;\nMapboxGL.Camera = Camera;\nMapboxGL.Style = Style;\n\n// annotations\nMapboxGL.Annotation = Annotation;\nMapboxGL.MarkerView = MarkerView;\n\n// sources\nMapboxGL.VectorSource = VectorSource;\nMapboxGL.ShapeSource = ShapeSource;\nMapboxGL.RasterSource = RasterSource;\nMapboxGL.ImageSource = ImageSource;\nMapboxGL.Images = Images;\n\n// layers\nMapboxGL.FillLayer = FillLayer;\nMapboxGL.FillExtrusionLayer = FillExtrusionLayer;\nMapboxGL.HeatmapLayer = HeatmapLayer;\nMapboxGL.LineLayer = LineLayer;\nMapboxGL.CircleLayer = CircleLayer;\nMapboxGL.SymbolLayer = SymbolLayer;\nMapboxGL.RasterLayer = RasterLayer;\nMapboxGL.BackgroundLayer = BackgroundLayer;\n\n// modules\nMapboxGL.locationManager = locationManager;\nMapboxGL.offlineManager = offlineManager;\nMapboxGL.snapshotManager = snapshotManager;\n\n// animated\nMapboxGL.Animated = Animated;\n\n// utils\nMapboxGL.AnimatedPoint = AnimatedMapPoint;\nMapboxGL.AnimatedCoordinatesArray = AnimatedCoordinatesArray;\nMapboxGL.AnimatedExtractCoordinateFromArray =\n  AnimatedExtractCoordinateFromArray;\nMapboxGL.AnimatedRouteCoordinatesArray = AnimatedRouteCoordinatesArray;\nMapboxGL.AnimatedShape = AnimatedShape;\nMapboxGL.Logger = Logger;\n\nconst {LineJoin} = MapboxGL;\n\nexport {\n  MapView,\n  Light,\n  PointAnnotation,\n  Callout,\n  UserLocation,\n  Camera,\n  Annotation,\n  MarkerView,\n  VectorSource,\n  ShapeSource,\n  RasterSource,\n  ImageSource,\n  Images,\n  FillLayer,\n  FillExtrusionLayer,\n  HeatmapLayer,\n  LineLayer,\n  CircleLayer,\n  SymbolLayer,\n  RasterLayer,\n  BackgroundLayer,\n  locationManager,\n  offlineManager,\n  snapshotManager,\n  AnimatedMapPoint,\n  AnimatedCoordinatesArray,\n  AnimatedShape,\n  Animated,\n  LineJoin,\n  Logger,\n  Style,\n};\n\nexport default MapboxGL;\n"]},"metadata":{},"sourceType":"module"}