{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/RasterSource.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { cloneReactChildrenWithProps, viewPropTypes } from \"../utils\";\nimport AbstractSource from \"./AbstractSource\";\nvar MapboxGL = NativeModules.MGLModule;\nexport var NATIVE_MODULE_NAME = 'RCTMGLRasterSource';\n\nvar isTileTemplateUrl = function isTileTemplateUrl(url) {\n  return url && (url.includes('{z}') || url.includes('{bbox-') || url.includes('{quadkey}'));\n};\n\nvar RasterSource = function (_AbstractSource) {\n  _inherits(RasterSource, _AbstractSource);\n\n  var _super = _createSuper(RasterSource);\n\n  function RasterSource(props) {\n    var _this;\n\n    _classCallCheck(this, RasterSource);\n\n    _this = _super.call(this, props);\n\n    if (isTileTemplateUrl(props.url)) {\n      console.warn(\"RasterSource 'url' property contains a Tile URL Template, but is intended for a StyleJSON URL. Please migrate your VectorSource to use: `tileUrlTemplates=[\\\"\" + props.url + \"\\\"]` instead.\");\n    }\n\n    return _this;\n  }\n\n  _createClass(RasterSource, [{\n    key: \"render\",\n    value: function render() {\n      var url = this.props.url;\n      var tileUrlTemplates = this.props.tileUrlTemplates;\n\n      if (isTileTemplateUrl(url)) {\n        tileUrlTemplates = [url];\n        url = undefined;\n      }\n\n      var props = _objectSpread(_objectSpread({}, this.props), {}, {\n        id: this.props.id,\n        url: url,\n        tileUrlTemplates: tileUrlTemplates,\n        minZoomLevel: this.props.minZoomLevel,\n        maxZoomLevel: this.props.maxZoomLevel,\n        tileSize: this.props.tileSize,\n        tms: this.props.tms,\n        attribution: this.props.attribution\n      });\n\n      return React.createElement(RCTMGLRasterSource, _extends({\n        ref: \"nativeSource\"\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }), cloneReactChildrenWithProps(this.props.children, {\n        sourceID: this.props.id\n      }));\n    }\n  }]);\n\n  return RasterSource;\n}(AbstractSource);\n\nRasterSource.propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  tileUrlTemplates: PropTypes.arrayOf(PropTypes.string),\n  minZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  tileSize: PropTypes.number,\n  tms: PropTypes.bool,\n  attribution: PropTypes.string\n});\nRasterSource.defaultProps = {\n  id: MapboxGL.StyleSource.DefaultSourceID\n};\nvar RCTMGLRasterSource = requireNativeComponent(NATIVE_MODULE_NAME, RasterSource);\nexport default RasterSource;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/RasterSource.js"],"names":["React","PropTypes","requireNativeComponent","cloneReactChildrenWithProps","viewPropTypes","AbstractSource","MapboxGL","NativeModules","MGLModule","NATIVE_MODULE_NAME","isTileTemplateUrl","url","includes","RasterSource","props","console","warn","tileUrlTemplates","undefined","id","minZoomLevel","maxZoomLevel","tileSize","tms","attribution","children","sourceID","propTypes","string","isRequired","arrayOf","number","bool","defaultProps","StyleSource","DefaultSourceID","RCTMGLRasterSource"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;SACuBC,sB;AAEvB,SAAQC,2BAAR,EAAqCC,aAArC;AAEA,OAAOC,cAAP;AAEA,IAAMC,QAAQ,GAAGC,aAAa,CAACC,SAA/B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;;AAEP,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD;AAAA,SACxBA,GAAG,KACFA,GAAG,CAACC,QAAJ,CAAa,KAAb,KAAuBD,GAAG,CAACC,QAAJ,CAAa,QAAb,CAAvB,IAAiDD,GAAG,CAACC,QAAJ,CAAa,WAAb,CAD/C,CADqB;AAAA,CAA1B;;IASMC,Y;;;;;AAwDJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AACA,QAAIJ,iBAAiB,CAACI,KAAK,CAACH,GAAP,CAArB,EAAkC;AAChCI,MAAAA,OAAO,CAACC,IAAR,mKACkKF,KAAK,CAACH,GADxK;AAGD;;AANgB;AAOlB;;;;WAED,kBAAS;AACP,UAAKA,GAAL,GAAY,KAAKG,KAAjB,CAAKH,GAAL;AACA,UAAKM,gBAAL,GAAyB,KAAKH,KAA9B,CAAKG,gBAAL;;AAIA,UAAIP,iBAAiB,CAACC,GAAD,CAArB,EAA4B;AAC1BM,QAAAA,gBAAgB,GAAG,CAACN,GAAD,CAAnB;AACAA,QAAAA,GAAG,GAAGO,SAAN;AACD;;AAED,UAAMJ,KAAK,mCACN,KAAKA,KADC;AAETK,QAAAA,EAAE,EAAE,KAAKL,KAAL,CAAWK,EAFN;AAGTR,QAAAA,GAAG,EAAHA,GAHS;AAITM,QAAAA,gBAAgB,EAAhBA,gBAJS;AAKTG,QAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YALhB;AAMTC,QAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YANhB;AAOTC,QAAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWQ,QAPZ;AAQTC,QAAAA,GAAG,EAAE,KAAKT,KAAL,CAAWS,GARP;AASTC,QAAAA,WAAW,EAAE,KAAKV,KAAL,CAAWU;AATf,QAAX;;AAWA,aACE,oBAAC,kBAAD;AAAoB,QAAA,GAAG,EAAC;AAAxB,SAA2CV,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGX,2BAA2B,CAAC,KAAKW,KAAL,CAAWW,QAAZ,EAAsB;AAChDC,QAAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWK;AAD2B,OAAtB,CAD9B,CADF;AAOD;;;;EA9FwBd,c;;AAArBQ,Y,CACGc,S,mCACFvB,a;AAKHe,EAAAA,EAAE,EAAElB,SAAS,CAAC2B,MAAV,CAAiBC,U;AAKrBlB,EAAAA,GAAG,EAAEV,SAAS,CAAC2B,M;AAMfX,EAAAA,gBAAgB,EAAEhB,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAAC2B,MAA5B,C;AAOlBR,EAAAA,YAAY,EAAEnB,SAAS,CAAC8B,M;AAOxBV,EAAAA,YAAY,EAAEpB,SAAS,CAAC8B,M;AAMxBT,EAAAA,QAAQ,EAAErB,SAAS,CAAC8B,M;AAKpBR,EAAAA,GAAG,EAAEtB,SAAS,CAAC+B,I;AAMfR,EAAAA,WAAW,EAAEvB,SAAS,CAAC2B;;AAjDrBf,Y,CAoDGoB,Y,GAAe;AACpBd,EAAAA,EAAE,EAAEb,QAAQ,CAAC4B,WAAT,CAAqBC;AADL,C;AA6CxB,IAAMC,kBAAkB,GAAGlC,sBAAsB,CAC/CO,kBAD+C,EAE/CI,YAF+C,CAAjD;AAKA,eAAeA,YAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {NativeModules, requireNativeComponent} from 'react-native';\n\nimport {cloneReactChildrenWithProps, viewPropTypes} from '../utils';\n\nimport AbstractSource from './AbstractSource';\n\nconst MapboxGL = NativeModules.MGLModule;\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLRasterSource';\n\nconst isTileTemplateUrl = (url) =>\n  url &&\n  (url.includes('{z}') || url.includes('{bbox-') || url.includes('{quadkey}'));\n\n/**\n * RasterSource is a map content source that supplies raster image tiles to be shown on the map.\n * The location of and metadata about the tiles are defined either by an option dictionary\n * or by an external file that conforms to the TileJSON specification.\n */\nclass RasterSource extends AbstractSource {\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * A string that uniquely identifies the source.\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * A URL to a TileJSON configuration file describing the sourceâ€™s contents and other metadata.\n     */\n    url: PropTypes.string,\n\n    /**\n     * An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.\n     * Example: https://example.com/raster-tiles/{z}/{x}/{y}.png\n     */\n    tileUrlTemplates: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.\n     * The value should be between 0 and 22, inclusive, and less than\n     * maxZoomLevel, if specified. The default value for this option is 0.\n     */\n    minZoomLevel: PropTypes.number,\n\n    /**\n     * An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.\n     * The value should be between 0 and 22, inclusive, and less than\n     * minZoomLevel, if specified. The default value for this option is 22.\n     */\n    maxZoomLevel: PropTypes.number,\n\n    /**\n     * Size of the map tiles.\n     * Mapbox urls default to 256, all others default to 512.\n     */\n    tileSize: PropTypes.number,\n\n    /**\n     * Influences the y direction of the tile coordinates. (tms inverts y axis)\n     */\n    tms: PropTypes.bool,\n\n    /**\n     * An HTML or literal text string defining the buttons to be displayed in an action sheet when the\n     * source is part of a map viewâ€™s style and the map viewâ€™s attribution button is pressed.\n     */\n    attribution: PropTypes.string,\n  };\n\n  static defaultProps = {\n    id: MapboxGL.StyleSource.DefaultSourceID,\n  };\n\n  constructor(props) {\n    super(props);\n    if (isTileTemplateUrl(props.url)) {\n      console.warn(\n        `RasterSource 'url' property contains a Tile URL Template, but is intended for a StyleJSON URL. Please migrate your VectorSource to use: \\`tileUrlTemplates=[\"${props.url}\"]\\` instead.`,\n      );\n    }\n  }\n\n  render() {\n    let {url} = this.props;\n    let {tileUrlTemplates} = this.props;\n\n    // Swapping url for tileUrlTemplates to provide backward compatiblity\n    // when RasterSource supported only tile url as url prop\n    if (isTileTemplateUrl(url)) {\n      tileUrlTemplates = [url];\n      url = undefined;\n    }\n\n    const props = {\n      ...this.props,\n      id: this.props.id,\n      url,\n      tileUrlTemplates,\n      minZoomLevel: this.props.minZoomLevel,\n      maxZoomLevel: this.props.maxZoomLevel,\n      tileSize: this.props.tileSize,\n      tms: this.props.tms,\n      attribution: this.props.attribution,\n    };\n    return (\n      <RCTMGLRasterSource ref=\"nativeSource\" {...props}>\n        {cloneReactChildrenWithProps(this.props.children, {\n          sourceID: this.props.id,\n        })}\n      </RCTMGLRasterSource>\n    );\n  }\n}\n\nconst RCTMGLRasterSource = requireNativeComponent(\n  NATIVE_MODULE_NAME,\n  RasterSource,\n);\n\nexport default RasterSource;\n"]},"metadata":{},"sourceType":"module"}