{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/ShapeSource.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { getFilter } from \"../utils/filterUtils\";\nimport { toJSONString, cloneReactChildrenWithProps, viewPropTypes, isFunction, isAndroid } from \"../utils\";\nimport { copyPropertiesAsDeprecated } from \"../utils/deprecation\";\nimport AbstractSource from \"./AbstractSource\";\nimport NativeBridgeComponent from \"./NativeBridgeComponent\";\nvar MapboxGL = NativeModules.MGLModule;\nexport var NATIVE_MODULE_NAME = 'RCTMGLShapeSource';\n\nvar ShapeSource = function (_NativeBridgeComponen) {\n  _inherits(ShapeSource, _NativeBridgeComponen);\n\n  var _super = _createSuper(ShapeSource);\n\n  function ShapeSource(props) {\n    _classCallCheck(this, ShapeSource);\n\n    return _super.call(this, props, NATIVE_MODULE_NAME);\n  }\n\n  _createClass(ShapeSource, [{\n    key: \"_setNativeRef\",\n    value: function _setNativeRef(nativeRef) {\n      this._nativeRef = nativeRef;\n\n      _get(_getPrototypeOf(ShapeSource.prototype), \"_runPendingNativeCommands\", this).call(this, nativeRef);\n    }\n  }, {\n    key: \"features\",\n    value: function features() {\n      var filter,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.async(function features$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              filter = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('features', this._nativeRef, [getFilter(filter)]));\n\n            case 3:\n              res = _context.sent;\n\n              if (!isAndroid()) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", JSON.parse(res.data));\n\n            case 6:\n              return _context.abrupt(\"return\", res.data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getClusterExpansionZoom\",\n    value: function getClusterExpansionZoom(clusterId) {\n      var res;\n      return _regeneratorRuntime.async(function getClusterExpansionZoom$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('getClusterExpansionZoom', this._nativeRef, [clusterId]));\n\n            case 2:\n              res = _context2.sent;\n              return _context2.abrupt(\"return\", res.data);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getClusterLeaves\",\n    value: function getClusterLeaves(clusterId, limit, offset) {\n      var res;\n      return _regeneratorRuntime.async(function getClusterLeaves$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this._runNativeCommand('getClusterLeaves', this._nativeRef, [clusterId, limit, offset]));\n\n            case 2:\n              res = _context3.sent;\n\n              if (!isAndroid()) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", JSON.parse(res.data));\n\n            case 5:\n              return _context3.abrupt(\"return\", res.data);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      var shallowProps = _extends({}, props);\n\n      if (shallowProps.shape && typeof shallowProps !== 'string') {\n        shallowProps.shape = JSON.stringify(shallowProps.shape);\n      }\n\n      _get(_getPrototypeOf(ShapeSource.prototype), \"setNativeProps\", this).call(this, shallowProps);\n    }\n  }, {\n    key: \"_getShape\",\n    value: function _getShape() {\n      if (!this.props.shape) {\n        return;\n      }\n\n      return toJSONString(this.props.shape);\n    }\n  }, {\n    key: \"onPress\",\n    value: function onPress(event) {\n      var _event$nativeEvent$pa = event.nativeEvent.payload,\n          features = _event$nativeEvent$pa.features,\n          coordinates = _event$nativeEvent$pa.coordinates,\n          point = _event$nativeEvent$pa.point;\n      var newEvent = {\n        features: features,\n        coordinates: coordinates,\n        point: point\n      };\n      newEvent = copyPropertiesAsDeprecated(event, newEvent, function (key) {\n        console.warn(\"event.\" + key + \" is deprecated on ShapeSource#onPress, please use event.features\");\n      }, {\n        nativeEvent: function nativeEvent(origNativeEvent) {\n          return _objectSpread(_objectSpread({}, origNativeEvent), {}, {\n            payload: features[0]\n          });\n        }\n      });\n      this.props.onPress(newEvent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var props = {\n        id: this.props.id,\n        url: this.props.url,\n        shape: this._getShape(),\n        hitbox: this.props.hitbox,\n        hasPressListener: isFunction(this.props.onPress),\n        onMapboxShapeSourcePress: this.onPress.bind(this),\n        cluster: this.props.cluster ? 1 : 0,\n        clusterRadius: this.props.clusterRadius,\n        clusterMaxZoomLevel: this.props.clusterMaxZoomLevel,\n        maxZoomLevel: this.props.maxZoomLevel,\n        buffer: this.props.buffer,\n        tolerance: this.props.tolerance,\n        onPress: undefined,\n        ref: function ref(nativeRef) {\n          return _this._setNativeRef(nativeRef);\n        },\n        onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined\n      };\n      return React.createElement(RCTMGLShapeSource, _extends({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 7\n        }\n      }), cloneReactChildrenWithProps(this.props.children, {\n        sourceID: this.props.id\n      }));\n    }\n  }]);\n\n  return ShapeSource;\n}(NativeBridgeComponent(AbstractSource));\n\nShapeSource.NATIVE_ASSETS_KEY = 'assets';\nShapeSource.propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  shape: PropTypes.object,\n  cluster: PropTypes.bool,\n  clusterRadius: PropTypes.number,\n  clusterMaxZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  buffer: PropTypes.number,\n  tolerance: PropTypes.number,\n  onPress: PropTypes.func,\n  hitbox: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired\n  })\n});\nShapeSource.defaultProps = {\n  id: MapboxGL.StyleSource.DefaultSourceID\n};\nvar RCTMGLShapeSource = requireNativeComponent(NATIVE_MODULE_NAME, ShapeSource, {\n  nativeOnly: {\n    hasPressListener: true,\n    onMapboxShapeSourcePress: true\n  }\n});\nexport default ShapeSource;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/ShapeSource.js"],"names":["React","PropTypes","requireNativeComponent","getFilter","toJSONString","cloneReactChildrenWithProps","viewPropTypes","isFunction","isAndroid","copyPropertiesAsDeprecated","AbstractSource","NativeBridgeComponent","MapboxGL","NativeModules","MGLModule","NATIVE_MODULE_NAME","ShapeSource","props","nativeRef","_nativeRef","filter","_runNativeCommand","res","JSON","parse","data","clusterId","limit","offset","shallowProps","shape","stringify","event","nativeEvent","payload","features","coordinates","point","newEvent","key","console","warn","origNativeEvent","onPress","id","url","_getShape","hitbox","hasPressListener","onMapboxShapeSourcePress","bind","cluster","clusterRadius","clusterMaxZoomLevel","maxZoomLevel","buffer","tolerance","undefined","ref","_setNativeRef","onAndroidCallback","_onAndroidCallback","children","sourceID","NATIVE_ASSETS_KEY","propTypes","string","isRequired","object","bool","number","func","width","height","defaultProps","StyleSource","DefaultSourceID","RCTMGLShapeSource","nativeOnly"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {NativeModules, requireNativeComponent} from 'react-native';\n\nimport {getFilter} from '../utils/filterUtils';\nimport {\n  toJSONString,\n  cloneReactChildrenWithProps,\n  viewPropTypes,\n  isFunction,\n  isAndroid,\n} from '../utils';\nimport {copyPropertiesAsDeprecated} from '../utils/deprecation';\n\nimport AbstractSource from './AbstractSource';\nimport NativeBridgeComponent from './NativeBridgeComponent';\n\nconst MapboxGL = NativeModules.MGLModule;\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLShapeSource';\n\n/**\n * ShapeSource is a map content source that supplies vector shapes to be shown on the map.\n * The shape may be a url or a GeoJSON object\n */\nclass ShapeSource extends NativeBridgeComponent(AbstractSource) {\n  static NATIVE_ASSETS_KEY = 'assets';\n\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * A string that uniquely identifies the source.\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * An HTTP(S) URL, absolute file URL, or local file URL relative to the current application’s resource bundle.\n     */\n    url: PropTypes.string,\n\n    /**\n     * The contents of the source. A shape can represent a GeoJSON geometry, a feature, or a feature colllection.\n     */\n    shape: PropTypes.object,\n\n    /**\n     * Enables clustering on the source for point shapes.\n     */\n    cluster: PropTypes.bool,\n\n    /**\n     * Specifies the radius of each cluster if clustering is enabled.\n     * A value of 512 produces a radius equal to the width of a tile.\n     * The default value is 50.\n     */\n    clusterRadius: PropTypes.number,\n\n    /**\n     * Specifies the maximum zoom level at which to cluster points if clustering is enabled.\n     * Defaults to one zoom level less than the value of maxZoomLevel so that, at the maximum zoom level,\n     * the shapes are not clustered.\n     */\n    clusterMaxZoomLevel: PropTypes.number,\n\n    /**\n     * Specifies the maximum zoom level at which to create vector tiles.\n     * A greater value produces greater detail at high zoom levels.\n     * The default value is 18.\n     */\n    maxZoomLevel: PropTypes.number,\n\n    /**\n     * Specifies the size of the tile buffer on each side.\n     * A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself.\n     * Larger values produce fewer rendering artifacts near tile edges and slower performance.\n     * The default value is 128.\n     */\n    buffer: PropTypes.number,\n\n    /**\n     * Specifies the Douglas-Peucker simplification tolerance.\n     * A greater value produces simpler geometries and improves performance.\n     * The default value is 0.375.\n     */\n    tolerance: PropTypes.number,\n\n    /**\n     * Source press listener, gets called when a user presses one of the children layers only\n     * if that layer has a higher z-index than another source layers\n     *\n     * @param {Object} event\n     * @param {Object[]} event.features - the geojson features that have hit by the press (might be multiple)\n     * @param {Object} event.coordinates - the coordinates of the click\n     * @param {Object} event.point - the point of the click\n     * @return void\n     */\n    onPress: PropTypes.func,\n\n    /**\n     * Overrides the default touch hitbox(44x44 pixels) for the source layers\n     */\n    hitbox: PropTypes.shape({\n      /**\n       * `width` of hitbox\n       */\n      width: PropTypes.number.isRequired,\n      /**\n       * `height` of hitbox\n       */\n      height: PropTypes.number.isRequired,\n    }),\n  };\n\n  static defaultProps = {\n    id: MapboxGL.StyleSource.DefaultSourceID,\n  };\n\n  constructor(props) {\n    super(props, NATIVE_MODULE_NAME);\n  }\n\n  _setNativeRef(nativeRef) {\n    this._nativeRef = nativeRef;\n    super._runPendingNativeCommands(nativeRef);\n  }\n\n  /**\n   * Returns all features from the source that match the query parameters regardless of whether or not the feature is\n   * currently rendered on the map.\n   *\n   * @example\n   * shapeSource.features()\n   *\n   * @param  {Array=} filter - an optional filter statement to filter the returned Features.\n   * @return {FeatureCollection}\n   */\n  async features(filter = []) {\n    const res = await this._runNativeCommand('features', this._nativeRef, [\n      getFilter(filter),\n    ]);\n\n    if (isAndroid()) {\n      return JSON.parse(res.data);\n    }\n\n    return res.data;\n  }\n\n  /**\n   * Returns the zoom needed to expand the cluster.\n   *\n   * @example\n   * const zoom = await shapeSource.getClusterExpansionZoom(clusterId);\n   *\n   * @param  {number} clusterId - The id of the cluster to expand.\n   * @return {number}\n   */\n  async getClusterExpansionZoom(clusterId) {\n    const res = await this._runNativeCommand(\n      'getClusterExpansionZoom',\n      this._nativeRef,\n      [clusterId],\n    );\n    return res.data;\n  }\n\n  /**\n   * Returns the FeatureCollection from the cluster.\n   *\n   * @example\n   * const collection = await shapeSource.getClusterLeaves(clusterId, limit, offset);\n   *\n   * @param  {number} clusterId - The id of the cluster to expand.\n   * @param  {number} limit - The number of points to return.\n   * @param  {number} offset - The amount of points to skip (for pagination).\n   * @return {FeatureCollection}\n   */\n  async getClusterLeaves(clusterId, limit, offset) {\n    const res = await this._runNativeCommand(\n      'getClusterLeaves',\n      this._nativeRef,\n      [clusterId, limit, offset],\n    );\n\n    if (isAndroid()) {\n      return JSON.parse(res.data);\n    }\n\n    return res.data;\n  }\n\n  setNativeProps(props) {\n    const shallowProps = Object.assign({}, props);\n\n    // Adds support for Animated\n    if (shallowProps.shape && typeof shallowProps !== 'string') {\n      shallowProps.shape = JSON.stringify(shallowProps.shape);\n    }\n\n    super.setNativeProps(shallowProps);\n  }\n\n  _getShape() {\n    if (!this.props.shape) {\n      return;\n    }\n    return toJSONString(this.props.shape);\n  }\n\n  onPress(event) {\n    const {\n      nativeEvent: {\n        payload: {features, coordinates, point},\n      },\n    } = event;\n    let newEvent = {\n      features,\n      coordinates,\n      point,\n    };\n    newEvent = copyPropertiesAsDeprecated(\n      event,\n      newEvent,\n      (key) => {\n        console.warn(\n          `event.${key} is deprecated on ShapeSource#onPress, please use event.features`,\n        );\n      },\n      {\n        nativeEvent: (origNativeEvent) => ({\n          ...origNativeEvent,\n          payload: features[0],\n        }),\n      },\n    );\n    this.props.onPress(newEvent);\n  }\n\n  render() {\n    const props = {\n      id: this.props.id,\n      url: this.props.url,\n      shape: this._getShape(),\n      hitbox: this.props.hitbox,\n      hasPressListener: isFunction(this.props.onPress),\n      onMapboxShapeSourcePress: this.onPress.bind(this),\n      cluster: this.props.cluster ? 1 : 0,\n      clusterRadius: this.props.clusterRadius,\n      clusterMaxZoomLevel: this.props.clusterMaxZoomLevel,\n      maxZoomLevel: this.props.maxZoomLevel,\n      buffer: this.props.buffer,\n      tolerance: this.props.tolerance,\n      onPress: undefined,\n      ref: (nativeRef) => this._setNativeRef(nativeRef),\n      onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined,\n    };\n\n    return (\n      <RCTMGLShapeSource {...props}>\n        {cloneReactChildrenWithProps(this.props.children, {\n          sourceID: this.props.id,\n        })}\n      </RCTMGLShapeSource>\n    );\n  }\n}\n\nconst RCTMGLShapeSource = requireNativeComponent(\n  NATIVE_MODULE_NAME,\n  ShapeSource,\n  {\n    nativeOnly: {\n      hasPressListener: true,\n      onMapboxShapeSourcePress: true,\n    },\n  },\n);\n\nexport default ShapeSource;\n"]},"metadata":{},"sourceType":"module"}