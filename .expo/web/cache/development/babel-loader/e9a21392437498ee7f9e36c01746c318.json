{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/RasterLayer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { viewPropTypes } from \"../utils\";\nimport { RasterLayerStyleProp } from \"../utils/styleMap\";\nimport AbstractLayer from \"./AbstractLayer\";\nvar MapboxGL = NativeModules.MGLModule;\nexport var NATIVE_MODULE_NAME = 'RCTMGLRasterLayer';\n\nvar RasterLayer = function (_AbstractLayer) {\n  _inherits(RasterLayer, _AbstractLayer);\n\n  var _super = _createSuper(RasterLayer);\n\n  function RasterLayer() {\n    _classCallCheck(this, RasterLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RasterLayer, [{\n    key: \"render\",\n    value: function render() {\n      var props = _objectSpread(_objectSpread({}, this.baseProps), {}, {\n        sourceLayerID: this.props.sourceLayerID\n      });\n\n      return React.createElement(RCTMGLRasterLayer, _extends({\n        ref: \"nativeLayer\"\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return RasterLayer;\n}(AbstractLayer);\n\nRasterLayer.propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  id: PropTypes.string.isRequired,\n  sourceID: PropTypes.string,\n  sourceLayerID: PropTypes.string,\n  aboveLayerID: PropTypes.string,\n  belowLayerID: PropTypes.string,\n  layerIndex: PropTypes.number,\n  filter: PropTypes.array,\n  minZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  style: PropTypes.oneOfType([RasterLayerStyleProp, PropTypes.arrayOf(RasterLayerStyleProp)])\n});\nRasterLayer.defaultProps = {\n  sourceID: MapboxGL.StyleSource.DefaultSourceID\n};\nvar RCTMGLRasterLayer = requireNativeComponent(NATIVE_MODULE_NAME, RasterLayer, {\n  nativeOnly: {\n    reactStyle: true\n  }\n});\nexport default RasterLayer;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/RasterLayer.js"],"names":["React","PropTypes","requireNativeComponent","viewPropTypes","RasterLayerStyleProp","AbstractLayer","MapboxGL","NativeModules","MGLModule","NATIVE_MODULE_NAME","RasterLayer","props","baseProps","sourceLayerID","propTypes","id","string","isRequired","sourceID","aboveLayerID","belowLayerID","layerIndex","number","filter","array","minZoomLevel","maxZoomLevel","style","oneOfType","arrayOf","defaultProps","StyleSource","DefaultSourceID","RCTMGLRasterLayer","nativeOnly","reactStyle"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;SACuBC,sB;AAEvB,SAAQC,aAAR;AACA,SAAQC,oBAAR;AAEA,OAAOC,aAAP;AAEA,IAAMC,QAAQ,GAAGC,aAAa,CAACC,SAA/B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,mBAA3B;;IAEDC,W;;;;;;;;;;;;;WA8DJ,kBAAS;AACP,UAAMC,KAAK,mCACN,KAAKC,SADC;AAETC,QAAAA,aAAa,EAAE,KAAKF,KAAL,CAAWE;AAFjB,QAAX;;AAIA,aAAO,oBAAC,iBAAD;AAAmB,QAAA,GAAG,EAAC;AAAvB,SAAyCF,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EApEuBN,a;;AAApBK,W,CACGI,S,mCACFX,a;AAKHY,EAAAA,EAAE,EAAEd,SAAS,CAACe,MAAV,CAAiBC,U;AAKrBC,EAAAA,QAAQ,EAAEjB,SAAS,CAACe,M;AAKpBH,EAAAA,aAAa,EAAEZ,SAAS,CAACe,M;AAKzBG,EAAAA,YAAY,EAAElB,SAAS,CAACe,M;AAKxBI,EAAAA,YAAY,EAAEnB,SAAS,CAACe,M;AAKxBK,EAAAA,UAAU,EAAEpB,SAAS,CAACqB,M;AAKtBC,EAAAA,MAAM,EAAEtB,SAAS,CAACuB,K;AAKlBC,EAAAA,YAAY,EAAExB,SAAS,CAACqB,M;AAKxBI,EAAAA,YAAY,EAAEzB,SAAS,CAACqB,M;AAKxBK,EAAAA,KAAK,EAAE1B,SAAS,CAAC2B,SAAV,CAAoB,CACzBxB,oBADyB,EAEzBH,SAAS,CAAC4B,OAAV,CAAkBzB,oBAAlB,CAFyB,CAApB;;AApDLM,W,CA0DGoB,Y,GAAe;AACpBZ,EAAAA,QAAQ,EAAEZ,QAAQ,CAACyB,WAAT,CAAqBC;AADX,C;AAaxB,IAAMC,iBAAiB,GAAG/B,sBAAsB,CAC9CO,kBAD8C,EAE9CC,WAF8C,EAG9C;AACEwB,EAAAA,UAAU,EAAE;AAACC,IAAAA,UAAU,EAAE;AAAb;AADd,CAH8C,CAAhD;AAQA,eAAezB,WAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {NativeModules, requireNativeComponent} from 'react-native';\n\nimport {viewPropTypes} from '../utils';\nimport {RasterLayerStyleProp} from '../utils/styleMap';\n\nimport AbstractLayer from './AbstractLayer';\n\nconst MapboxGL = NativeModules.MGLModule;\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLRasterLayer';\n\nclass RasterLayer extends AbstractLayer {\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * A string that uniquely identifies the source in the style to which it is added.\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * The source from which to obtain the data to style. If the source has not yet been added to the current style, the behavior is undefined.\n     */\n    sourceID: PropTypes.string,\n\n    /**\n     * Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style.\n     */\n    sourceLayerID: PropTypes.string,\n\n    /**\n     * Inserts a layer above aboveLayerID.\n     */\n    aboveLayerID: PropTypes.string,\n\n    /**\n     * Inserts a layer below belowLayerID\n     */\n    belowLayerID: PropTypes.string,\n\n    /**\n     * Inserts a layer at a specified index\n     */\n    layerIndex: PropTypes.number,\n\n    /**\n     *  Filter only the features in the source layer that satisfy a condition that you define\n     */\n    filter: PropTypes.array,\n\n    /**\n     * The minimum zoom level at which the layer gets parsed and appears.\n     */\n    minZoomLevel: PropTypes.number,\n\n    /**\n     * The maximum zoom level at which the layer gets parsed and appears.\n     */\n    maxZoomLevel: PropTypes.number,\n\n    /**\n     * Customizable style attributes\n     */\n    style: PropTypes.oneOfType([\n      RasterLayerStyleProp,\n      PropTypes.arrayOf(RasterLayerStyleProp),\n    ]),\n  };\n\n  static defaultProps = {\n    sourceID: MapboxGL.StyleSource.DefaultSourceID,\n  };\n\n  render() {\n    const props = {\n      ...this.baseProps,\n      sourceLayerID: this.props.sourceLayerID,\n    };\n    return <RCTMGLRasterLayer ref=\"nativeLayer\" {...props} />;\n  }\n}\n\nconst RCTMGLRasterLayer = requireNativeComponent(\n  NATIVE_MODULE_NAME,\n  RasterLayer,\n  {\n    nativeOnly: {reactStyle: true},\n  },\n);\n\nexport default RasterLayer;\n"]},"metadata":{},"sourceType":"module"}