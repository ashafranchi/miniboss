{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/SymbolLayer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\nimport { viewPropTypes } from \"../utils\";\nimport { SymbolLayerStyleProp } from \"../utils/styleMap\";\nimport AbstractLayer from \"./AbstractLayer\";\nvar MapboxGL = NativeModules.MGLModule;\nexport var NATIVE_MODULE_NAME = 'RCTMGLSymbolLayer';\n\nvar SymbolLayer = function (_AbstractLayer) {\n  _inherits(SymbolLayer, _AbstractLayer);\n\n  var _super = _createSuper(SymbolLayer);\n\n  function SymbolLayer() {\n    _classCallCheck(this, SymbolLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SymbolLayer, [{\n    key: \"_shouldSnapshot\",\n    value: function _shouldSnapshot() {\n      var isSnapshot = false;\n\n      if (React.Children.count(this.props.children) <= 0) {\n        return isSnapshot;\n      }\n\n      React.Children.forEach(this.props.children, function (child) {\n        if (child.type === View) {\n          isSnapshot = true;\n        }\n      });\n      return isSnapshot;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = _objectSpread(_objectSpread({}, this.baseProps), {}, {\n        snapshot: this._shouldSnapshot(),\n        sourceLayerID: this.props.sourceLayerID\n      });\n\n      return React.createElement(RCTMGLSymbolLayer, _extends({\n        ref: \"nativeLayer\"\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 7\n        }\n      }), this.props.children);\n    }\n  }]);\n\n  return SymbolLayer;\n}(AbstractLayer);\n\nSymbolLayer.propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  id: PropTypes.string.isRequired,\n  sourceID: PropTypes.string,\n  sourceLayerID: PropTypes.string,\n  aboveLayerID: PropTypes.string,\n  belowLayerID: PropTypes.string,\n  layerIndex: PropTypes.number,\n  filter: PropTypes.array,\n  minZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  style: PropTypes.oneOfType([SymbolLayerStyleProp, PropTypes.arrayOf(SymbolLayerStyleProp)])\n});\nSymbolLayer.defaultProps = {\n  sourceID: MapboxGL.StyleSource.DefaultSourceID\n};\nvar RCTMGLSymbolLayer = requireNativeComponent(NATIVE_MODULE_NAME, SymbolLayer, {\n  nativeOnly: {\n    reactStyle: true,\n    snapshot: true\n  }\n});\nexport default SymbolLayer;","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/components/SymbolLayer.js"],"names":["React","requireNativeComponent","PropTypes","viewPropTypes","SymbolLayerStyleProp","AbstractLayer","MapboxGL","NativeModules","MGLModule","NATIVE_MODULE_NAME","SymbolLayer","isSnapshot","Children","count","props","children","forEach","child","type","View","baseProps","snapshot","_shouldSnapshot","sourceLayerID","propTypes","id","string","isRequired","sourceID","aboveLayerID","belowLayerID","layerIndex","number","filter","array","minZoomLevel","maxZoomLevel","style","oneOfType","arrayOf","defaultProps","StyleSource","DefaultSourceID","RCTMGLSymbolLayer","nativeOnly","reactStyle"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;SAC6BC,sB;AAC7B,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAAQC,aAAR;AACA,SAAQC,oBAAR;AAEA,OAAOC,aAAP;AAEA,IAAMC,QAAQ,GAAGC,aAAa,CAACC,SAA/B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,mBAA3B;;IAKDC,W;;;;;;;;;;;;;WA8DJ,2BAAkB;AAChB,UAAIC,UAAU,GAAG,KAAjB;;AAEA,UAAIX,KAAK,CAACY,QAAN,CAAeC,KAAf,CAAqB,KAAKC,KAAL,CAAWC,QAAhC,KAA6C,CAAjD,EAAoD;AAClD,eAAOJ,UAAP;AACD;;AAEDX,MAAAA,KAAK,CAACY,QAAN,CAAeI,OAAf,CAAuB,KAAKF,KAAL,CAAWC,QAAlC,EAA4C,UAACE,KAAD,EAAW;AACrD,YAAIA,KAAK,CAACC,IAAN,KAAeC,IAAnB,EAAyB;AACvBR,UAAAA,UAAU,GAAG,IAAb;AACD;AACF,OAJD;AAMA,aAAOA,UAAP;AACD;;;WAED,kBAAS;AACP,UAAMG,KAAK,mCACN,KAAKM,SADC;AAETC,QAAAA,QAAQ,EAAE,KAAKC,eAAL,EAFD;AAGTC,QAAAA,aAAa,EAAE,KAAKT,KAAL,CAAWS;AAHjB,QAAX;;AAMA,aACE,oBAAC,iBAAD;AAAmB,QAAA,GAAG,EAAC;AAAvB,SAAyCT,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACG,KAAKA,KAAL,CAAWC,QADd,CADF;AAKD;;;;EA1FuBV,a;;AAApBK,W,CACGc,S,mCACFrB,a;AAKHsB,EAAAA,EAAE,EAAEvB,SAAS,CAACwB,MAAV,CAAiBC,U;AAKrBC,EAAAA,QAAQ,EAAE1B,SAAS,CAACwB,M;AAKpBH,EAAAA,aAAa,EAAErB,SAAS,CAACwB,M;AAKzBG,EAAAA,YAAY,EAAE3B,SAAS,CAACwB,M;AAKxBI,EAAAA,YAAY,EAAE5B,SAAS,CAACwB,M;AAKxBK,EAAAA,UAAU,EAAE7B,SAAS,CAAC8B,M;AAKtBC,EAAAA,MAAM,EAAE/B,SAAS,CAACgC,K;AAKlBC,EAAAA,YAAY,EAAEjC,SAAS,CAAC8B,M;AAKxBI,EAAAA,YAAY,EAAElC,SAAS,CAAC8B,M;AAKxBK,EAAAA,KAAK,EAAEnC,SAAS,CAACoC,SAAV,CAAoB,CACzBlC,oBADyB,EAEzBF,SAAS,CAACqC,OAAV,CAAkBnC,oBAAlB,CAFyB,CAApB;;AApDLM,W,CA0DG8B,Y,GAAe;AACpBZ,EAAAA,QAAQ,EAAEtB,QAAQ,CAACmC,WAAT,CAAqBC;AADX,C;AAmCxB,IAAMC,iBAAiB,GAAG1C,sBAAsB,CAC9CQ,kBAD8C,EAE9CC,WAF8C,EAG9C;AACEkC,EAAAA,UAAU,EAAE;AAACC,IAAAA,UAAU,EAAE,IAAb;AAAmBxB,IAAAA,QAAQ,EAAE;AAA7B;AADd,CAH8C,CAAhD;AAQA,eAAeX,WAAf","sourcesContent":["import React from 'react';\nimport {View, NativeModules, requireNativeComponent} from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport {viewPropTypes} from '../utils';\nimport {SymbolLayerStyleProp} from '../utils/styleMap';\n\nimport AbstractLayer from './AbstractLayer';\n\nconst MapboxGL = NativeModules.MGLModule;\n\nexport const NATIVE_MODULE_NAME = 'RCTMGLSymbolLayer';\n\n/**\n * SymbolLayer is a style layer that renders icon and text labels at points or along lines on the map.\n */\nclass SymbolLayer extends AbstractLayer {\n  static propTypes = {\n    ...viewPropTypes,\n\n    /**\n     * A string that uniquely identifies the source in the style to which it is added.\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * The source from which to obtain the data to style. If the source has not yet been added to the current style, the behavior is undefined.\n     */\n    sourceID: PropTypes.string,\n\n    /**\n     * Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style.\n     */\n    sourceLayerID: PropTypes.string,\n\n    /**\n     * Inserts a layer above aboveLayerID.\n     */\n    aboveLayerID: PropTypes.string,\n\n    /**\n     * Inserts a layer below belowLayerID\n     */\n    belowLayerID: PropTypes.string,\n\n    /**\n     * Inserts a layer at a specified index\n     */\n    layerIndex: PropTypes.number,\n\n    /**\n     *  Filter only the features in the source layer that satisfy a condition that you define\n     */\n    filter: PropTypes.array,\n\n    /**\n     * The minimum zoom level at which the layer gets parsed and appears.\n     */\n    minZoomLevel: PropTypes.number,\n\n    /**\n     * The maximum zoom level at which the layer gets parsed and appears.\n     */\n    maxZoomLevel: PropTypes.number,\n\n    /**\n     * Customizable style attributes\n     */\n    style: PropTypes.oneOfType([\n      SymbolLayerStyleProp,\n      PropTypes.arrayOf(SymbolLayerStyleProp),\n    ]),\n  };\n\n  static defaultProps = {\n    sourceID: MapboxGL.StyleSource.DefaultSourceID,\n  };\n\n  _shouldSnapshot() {\n    let isSnapshot = false;\n\n    if (React.Children.count(this.props.children) <= 0) {\n      return isSnapshot;\n    }\n\n    React.Children.forEach(this.props.children, (child) => {\n      if (child.type === View) {\n        isSnapshot = true;\n      }\n    });\n\n    return isSnapshot;\n  }\n\n  render() {\n    const props = {\n      ...this.baseProps,\n      snapshot: this._shouldSnapshot(),\n      sourceLayerID: this.props.sourceLayerID,\n    };\n\n    return (\n      <RCTMGLSymbolLayer ref=\"nativeLayer\" {...props}>\n        {this.props.children}\n      </RCTMGLSymbolLayer>\n    );\n  }\n}\n\nconst RCTMGLSymbolLayer = requireNativeComponent(\n  NATIVE_MODULE_NAME,\n  SymbolLayer,\n  {\n    nativeOnly: {reactStyle: true, snapshot: true},\n  },\n);\n\nexport default SymbolLayer;\n"]},"metadata":{},"sourceType":"module"}