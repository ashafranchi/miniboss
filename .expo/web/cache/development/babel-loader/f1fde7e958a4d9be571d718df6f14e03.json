{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nvar MapboxGL = NativeModules.MGLModule;\nvar MapboxGLLocationManager = NativeModules.MGLLocationModule;\nexport var LocationModuleEventEmitter = new NativeEventEmitter(MapboxGLLocationManager);\n\nvar LocationManager = function () {\n  function LocationManager() {\n    _classCallCheck(this, LocationManager);\n\n    this._listeners = [];\n    this._lastKnownLocation = null;\n    this._isListening = false;\n    this.onUpdate = this.onUpdate.bind(this);\n  }\n\n  _createClass(LocationManager, [{\n    key: \"getLastKnownLocation\",\n    value: function getLastKnownLocation() {\n      var lastKnownLocation;\n      return _regeneratorRuntime.async(function getLastKnownLocation$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (this._lastKnownLocation) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(MapboxGLLocationManager.getLastKnownLocation());\n\n            case 4:\n              lastKnownLocation = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              console.log('locationManager Error: ', _context.t0);\n\n            case 10:\n              if (!this._lastKnownLocation && lastKnownLocation) {\n                this._lastKnownLocation = lastKnownLocation;\n              }\n\n            case 11:\n              return _context.abrupt(\"return\", this._lastKnownLocation);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 7]], Promise);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      if (!this._isListening) {\n        this.start();\n      }\n\n      if (!this._listeners.includes(listener)) {\n        this._listeners.push(listener);\n\n        if (this._lastKnownLocation) {\n          listener(this._lastKnownLocation);\n        }\n      }\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      this._listeners = this._listeners.filter(function (l) {\n        return l !== listener;\n      });\n\n      if (this._listeners.length === 0) {\n        this.stop();\n      }\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this._listeners = [];\n      this.stop();\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var displacement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (!this._isListening) {\n        MapboxGLLocationManager.start(displacement);\n        LocationModuleEventEmitter.addListener(MapboxGL.LocationCallbackName.Update, this.onUpdate);\n        this._isListening = true;\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      MapboxGLLocationManager.stop();\n\n      if (this._isListening) {\n        LocationModuleEventEmitter.removeListener(MapboxGL.LocationCallbackName.Update, this.onUpdate);\n      }\n\n      this._isListening = false;\n    }\n  }, {\n    key: \"setMinDisplacement\",\n    value: function setMinDisplacement(minDisplacement) {\n      MapboxGLLocationManager.setMinDisplacement(minDisplacement);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(location) {\n      this._lastKnownLocation = location;\n\n      this._listeners.forEach(function (l) {\n        return l(location);\n      });\n    }\n  }]);\n\n  return LocationManager;\n}();\n\nexport default new LocationManager();","map":{"version":3,"sources":["/Users/asha/Documents/miniboss/node_modules/@react-native-mapbox-gl/maps/javascript/modules/location/locationManager.js"],"names":["MapboxGL","NativeModules","MGLModule","MapboxGLLocationManager","MGLLocationModule","LocationModuleEventEmitter","NativeEventEmitter","LocationManager","_listeners","_lastKnownLocation","_isListening","onUpdate","bind","getLastKnownLocation","lastKnownLocation","console","log","listener","start","includes","push","filter","l","length","stop","displacement","addListener","LocationCallbackName","Update","removeListener","minDisplacement","setMinDisplacement","location","forEach"],"mappings":";;;;;AAEA,IAAMA,QAAQ,GAAGC,aAAa,CAACC,SAA/B;AACA,IAAMC,uBAAuB,GAAGF,aAAa,CAACG,iBAA9C;AAEA,OAAO,IAAMC,0BAA0B,GAAG,IAAIC,kBAAJ,CACxCH,uBADwC,CAAnC;;IAIDI,e;AACJ,6BAAc;AAAA;;AACZ,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACO,KAAKH,kBADZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+CAUcN,uBAAuB,CAACU,oBAAxB,EAVd;;AAAA;AASMC,cAAAA,iBATN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYMC,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AAZN;AAeI,kBAAI,CAAC,KAAKP,kBAAN,IAA4BK,iBAAhC,EAAmD;AACjD,qBAAKL,kBAAL,GAA0BK,iBAA1B;AACD;;AAjBL;AAAA,+CAoBS,KAAKL,kBApBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAuBA,qBAAYQ,QAAZ,EAAsB;AACpB,UAAI,CAAC,KAAKP,YAAV,EAAwB;AACtB,aAAKQ,KAAL;AACD;;AACD,UAAI,CAAC,KAAKV,UAAL,CAAgBW,QAAhB,CAAyBF,QAAzB,CAAL,EAAyC;AACvC,aAAKT,UAAL,CAAgBY,IAAhB,CAAqBH,QAArB;;AAEA,YAAI,KAAKR,kBAAT,EAA6B;AAC3BQ,UAAAA,QAAQ,CAAC,KAAKR,kBAAN,CAAR;AACD;AACF;AACF;;;WAED,wBAAeQ,QAAf,EAAyB;AACvB,WAAKT,UAAL,GAAkB,KAAKA,UAAL,CAAgBa,MAAhB,CAAuB,UAACC,CAAD;AAAA,eAAOA,CAAC,KAAKL,QAAb;AAAA,OAAvB,CAAlB;;AACA,UAAI,KAAKT,UAAL,CAAgBe,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,aAAKC,IAAL;AACD;AACF;;;WAED,8BAAqB;AACnB,WAAKhB,UAAL,GAAkB,EAAlB;AACA,WAAKgB,IAAL;AACD;;;WAED,iBAAwB;AAAA,UAAlBC,YAAkB,uEAAH,CAAG;;AACtB,UAAI,CAAC,KAAKf,YAAV,EAAwB;AACtBP,QAAAA,uBAAuB,CAACe,KAAxB,CAA8BO,YAA9B;AAEApB,QAAAA,0BAA0B,CAACqB,WAA3B,CACE1B,QAAQ,CAAC2B,oBAAT,CAA8BC,MADhC,EAEE,KAAKjB,QAFP;AAKA,aAAKD,YAAL,GAAoB,IAApB;AACD;AACF;;;WAED,gBAAO;AACLP,MAAAA,uBAAuB,CAACqB,IAAxB;;AAEA,UAAI,KAAKd,YAAT,EAAuB;AACrBL,QAAAA,0BAA0B,CAACwB,cAA3B,CACE7B,QAAQ,CAAC2B,oBAAT,CAA8BC,MADhC,EAEE,KAAKjB,QAFP;AAID;;AAED,WAAKD,YAAL,GAAoB,KAApB;AACD;;;WAED,4BAAmBoB,eAAnB,EAAoC;AAClC3B,MAAAA,uBAAuB,CAAC4B,kBAAxB,CAA2CD,eAA3C;AACD;;;WAED,kBAASE,QAAT,EAAmB;AACjB,WAAKvB,kBAAL,GAA0BuB,QAA1B;;AAEA,WAAKxB,UAAL,CAAgByB,OAAhB,CAAwB,UAACX,CAAD;AAAA,eAAOA,CAAC,CAACU,QAAD,CAAR;AAAA,OAAxB;AACD;;;;;;AAGH,eAAe,IAAIzB,eAAJ,EAAf","sourcesContent":["import {NativeModules, NativeEventEmitter} from 'react-native';\n\nconst MapboxGL = NativeModules.MGLModule;\nconst MapboxGLLocationManager = NativeModules.MGLLocationModule;\n\nexport const LocationModuleEventEmitter = new NativeEventEmitter(\n  MapboxGLLocationManager,\n);\n\nclass LocationManager {\n  constructor() {\n    this._listeners = [];\n    this._lastKnownLocation = null;\n    this._isListening = false;\n    this.onUpdate = this.onUpdate.bind(this);\n  }\n\n  async getLastKnownLocation() {\n    if (!this._lastKnownLocation) {\n      let lastKnownLocation;\n\n      // as location can be brittle it might happen,\n      // that we get an exception from native land\n      // let's silently catch it and simply log out\n      // instead of throwing an exception\n      try {\n        lastKnownLocation =\n          await MapboxGLLocationManager.getLastKnownLocation();\n      } catch (error) {\n        console.log('locationManager Error: ', error);\n      }\n\n      if (!this._lastKnownLocation && lastKnownLocation) {\n        this._lastKnownLocation = lastKnownLocation;\n      }\n    }\n\n    return this._lastKnownLocation;\n  }\n\n  addListener(listener) {\n    if (!this._isListening) {\n      this.start();\n    }\n    if (!this._listeners.includes(listener)) {\n      this._listeners.push(listener);\n\n      if (this._lastKnownLocation) {\n        listener(this._lastKnownLocation);\n      }\n    }\n  }\n\n  removeListener(listener) {\n    this._listeners = this._listeners.filter((l) => l !== listener);\n    if (this._listeners.length === 0) {\n      this.stop();\n    }\n  }\n\n  removeAllListeners() {\n    this._listeners = [];\n    this.stop();\n  }\n\n  start(displacement = 0) {\n    if (!this._isListening) {\n      MapboxGLLocationManager.start(displacement);\n\n      LocationModuleEventEmitter.addListener(\n        MapboxGL.LocationCallbackName.Update,\n        this.onUpdate,\n      );\n\n      this._isListening = true;\n    }\n  }\n\n  stop() {\n    MapboxGLLocationManager.stop();\n\n    if (this._isListening) {\n      LocationModuleEventEmitter.removeListener(\n        MapboxGL.LocationCallbackName.Update,\n        this.onUpdate,\n      );\n    }\n\n    this._isListening = false;\n  }\n\n  setMinDisplacement(minDisplacement) {\n    MapboxGLLocationManager.setMinDisplacement(minDisplacement);\n  }\n\n  onUpdate(location) {\n    this._lastKnownLocation = location;\n\n    this._listeners.forEach((l) => l(location));\n  }\n}\n\nexport default new LocationManager();\n"]},"metadata":{},"sourceType":"module"}